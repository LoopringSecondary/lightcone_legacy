/*
 * Copyright 2018 Loopring Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.lightcone.ethereum.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * Auto generated code.
 *
 * <p><strong>Do not modify!</strong>
 *
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the <a
 * href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class RingSubmitter extends Contract {
  private static final String BINARY =
      "";

  public static final String FUNC_ORDERBROKERREGISTRYADDRESS = "orderBrokerRegistryAddress";

  public static final String FUNC_WETHTOKENADDRESS = "wethTokenAddress";

  public static final String FUNC_TRADEHISTORYADDRESS = "tradeHistoryAddress";

  public static final String FUNC_RINGINDEX = "ringIndex";

  public static final String FUNC_LRCTOKENADDRESS = "lrcTokenAddress";

  public static final String FUNC_DELEGATEADDRESS = "delegateAddress";

  public static final String FUNC_ORDERBOOKADDRESS = "orderBookAddress";

  public static final String FUNC_ORDERREGISTRYADDRESS = "orderRegistryAddress";

  public static final String FUNC_MAX_RING_SIZE = "MAX_RING_SIZE";

  public static final String FUNC_SUBMITRINGS = "submitRings";

  public static final String FUNC_FEE_PERCENTAGE_BASE = "FEE_PERCENTAGE_BASE";

  public static final String FUNC_BURNRATETABLEADDRESS = "burnRateTableAddress";

  public static final String FUNC_FEEHOLDERADDRESS = "feeHolderAddress";

  public static final Event RINGMINED_EVENT =
      new Event(
          "RingMined",
          Arrays.<TypeReference<?>>asList(
              new TypeReference<Uint256>() {},
              new TypeReference<Bytes32>(true) {},
              new TypeReference<Address>(true) {},
              new TypeReference<DynamicBytes>() {}));;

  public static final Event INVALIDRING_EVENT =
      new Event("InvalidRing", Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));;

  @Deprecated
  protected RingSubmitter(
      String contractAddress,
      Web3j web3j,
      Credentials credentials,
      BigInteger gasPrice,
      BigInteger gasLimit) {
    super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
  }

  protected RingSubmitter(
      String contractAddress,
      Web3j web3j,
      Credentials credentials,
      ContractGasProvider contractGasProvider) {
    super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
  }

  @Deprecated
  protected RingSubmitter(
      String contractAddress,
      Web3j web3j,
      TransactionManager transactionManager,
      BigInteger gasPrice,
      BigInteger gasLimit) {
    super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
  }

  protected RingSubmitter(
      String contractAddress,
      Web3j web3j,
      TransactionManager transactionManager,
      ContractGasProvider contractGasProvider) {
    super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
  }

  public RemoteCall<String> orderBrokerRegistryAddress() {
    final Function function =
        new Function(
            FUNC_ORDERBROKERREGISTRYADDRESS,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeRemoteCallSingleValueReturn(function, String.class);
  }

  public RemoteCall<String> wethTokenAddress() {
    final Function function =
        new Function(
            FUNC_WETHTOKENADDRESS,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeRemoteCallSingleValueReturn(function, String.class);
  }

  public RemoteCall<String> tradeHistoryAddress() {
    final Function function =
        new Function(
            FUNC_TRADEHISTORYADDRESS,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeRemoteCallSingleValueReturn(function, String.class);
  }

  public RemoteCall<BigInteger> ringIndex() {
    final Function function =
        new Function(
            FUNC_RINGINDEX,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
    return executeRemoteCallSingleValueReturn(function, BigInteger.class);
  }

  public RemoteCall<String> lrcTokenAddress() {
    final Function function =
        new Function(
            FUNC_LRCTOKENADDRESS,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeRemoteCallSingleValueReturn(function, String.class);
  }

  public RemoteCall<String> delegateAddress() {
    final Function function =
        new Function(
            FUNC_DELEGATEADDRESS,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeRemoteCallSingleValueReturn(function, String.class);
  }

  public RemoteCall<String> orderBookAddress() {
    final Function function =
        new Function(
            FUNC_ORDERBOOKADDRESS,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeRemoteCallSingleValueReturn(function, String.class);
  }

  public RemoteCall<String> orderRegistryAddress() {
    final Function function =
        new Function(
            FUNC_ORDERREGISTRYADDRESS,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeRemoteCallSingleValueReturn(function, String.class);
  }

  public RemoteCall<BigInteger> MAX_RING_SIZE() {
    final Function function =
        new Function(
            FUNC_MAX_RING_SIZE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    return executeRemoteCallSingleValueReturn(function, BigInteger.class);
  }

  public RemoteCall<TransactionReceipt> submitRings(byte[] data) {
    final Function function =
        new Function(
            FUNC_SUBMITRINGS,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(data)),
            Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }

  public RemoteCall<BigInteger> FEE_PERCENTAGE_BASE() {
    final Function function =
        new Function(
            FUNC_FEE_PERCENTAGE_BASE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
    return executeRemoteCallSingleValueReturn(function, BigInteger.class);
  }

  public RemoteCall<String> burnRateTableAddress() {
    final Function function =
        new Function(
            FUNC_BURNRATETABLEADDRESS,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeRemoteCallSingleValueReturn(function, String.class);
  }

  public RemoteCall<String> feeHolderAddress() {
    final Function function =
        new Function(
            FUNC_FEEHOLDERADDRESS,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeRemoteCallSingleValueReturn(function, String.class);
  }

  public List<RingMinedEventResponse> getRingMinedEvents(TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList =
        extractEventParametersWithLog(RINGMINED_EVENT, transactionReceipt);
    ArrayList<RingMinedEventResponse> responses =
        new ArrayList<RingMinedEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      RingMinedEventResponse typedResponse = new RingMinedEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse._ringHash = (byte[]) eventValues.getIndexedValues().get(0).getValue();
      typedResponse._feeRecipient = (String) eventValues.getIndexedValues().get(1).getValue();
      typedResponse._ringIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
      typedResponse._fills = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public Flowable<RingMinedEventResponse> ringMinedEventFlowable(EthFilter filter) {
    return web3j
        .ethLogFlowable(filter)
        .map(
            new io.reactivex.functions.Function<Log, RingMinedEventResponse>() {
              @Override
              public RingMinedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues =
                    extractEventParametersWithLog(RINGMINED_EVENT, log);
                RingMinedEventResponse typedResponse = new RingMinedEventResponse();
                typedResponse.log = log;
                typedResponse._ringHash = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._feeRecipient =
                    (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._ringIndex =
                    (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._fills = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
              }
            });
  }

  public Flowable<RingMinedEventResponse> ringMinedEventFlowable(
      DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(RINGMINED_EVENT));
    return ringMinedEventFlowable(filter);
  }

  public List<InvalidRingEventResponse> getInvalidRingEvents(
      TransactionReceipt transactionReceipt) {
    List<Contract.EventValuesWithLog> valueList =
        extractEventParametersWithLog(INVALIDRING_EVENT, transactionReceipt);
    ArrayList<InvalidRingEventResponse> responses =
        new ArrayList<InvalidRingEventResponse>(valueList.size());
    for (Contract.EventValuesWithLog eventValues : valueList) {
      InvalidRingEventResponse typedResponse = new InvalidRingEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse._ringHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public Flowable<InvalidRingEventResponse> invalidRingEventFlowable(EthFilter filter) {
    return web3j
        .ethLogFlowable(filter)
        .map(
            new io.reactivex.functions.Function<Log, InvalidRingEventResponse>() {
              @Override
              public InvalidRingEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues =
                    extractEventParametersWithLog(INVALIDRING_EVENT, log);
                InvalidRingEventResponse typedResponse = new InvalidRingEventResponse();
                typedResponse.log = log;
                typedResponse._ringHash =
                    (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
              }
            });
  }

  public Flowable<InvalidRingEventResponse> invalidRingEventFlowable(
      DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(INVALIDRING_EVENT));
    return invalidRingEventFlowable(filter);
  }

  @Deprecated
  public static RingSubmitter load(
      String contractAddress,
      Web3j web3j,
      Credentials credentials,
      BigInteger gasPrice,
      BigInteger gasLimit) {
    return new RingSubmitter(contractAddress, web3j, credentials, gasPrice, gasLimit);
  }

  @Deprecated
  public static RingSubmitter load(
      String contractAddress,
      Web3j web3j,
      TransactionManager transactionManager,
      BigInteger gasPrice,
      BigInteger gasLimit) {
    return new RingSubmitter(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
  }

  public static RingSubmitter load(
      String contractAddress,
      Web3j web3j,
      Credentials credentials,
      ContractGasProvider contractGasProvider) {
    return new RingSubmitter(contractAddress, web3j, credentials, contractGasProvider);
  }

  public static RingSubmitter load(
      String contractAddress,
      Web3j web3j,
      TransactionManager transactionManager,
      ContractGasProvider contractGasProvider) {
    return new RingSubmitter(contractAddress, web3j, transactionManager, contractGasProvider);
  }

  public static RemoteCall<RingSubmitter> deploy(
      Web3j web3j,
      Credentials credentials,
      ContractGasProvider contractGasProvider,
      String _lrcTokenAddress,
      String _wethTokenAddress,
      String _delegateAddress,
      String _tradeHistoryAddress,
      String _orderBrokerRegistryAddress,
      String _orderRegistryAddress,
      String _feeHolderAddress,
      String _orderBookAddress,
      String _burnRateTableAddress) {
    String encodedConstructor =
        FunctionEncoder.encodeConstructor(
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.Address(_lrcTokenAddress),
                new org.web3j.abi.datatypes.Address(_wethTokenAddress),
                new org.web3j.abi.datatypes.Address(_delegateAddress),
                new org.web3j.abi.datatypes.Address(_tradeHistoryAddress),
                new org.web3j.abi.datatypes.Address(_orderBrokerRegistryAddress),
                new org.web3j.abi.datatypes.Address(_orderRegistryAddress),
                new org.web3j.abi.datatypes.Address(_feeHolderAddress),
                new org.web3j.abi.datatypes.Address(_orderBookAddress),
                new org.web3j.abi.datatypes.Address(_burnRateTableAddress)));
    return deployRemoteCall(
        RingSubmitter.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
  }

  public static RemoteCall<RingSubmitter> deploy(
      Web3j web3j,
      TransactionManager transactionManager,
      ContractGasProvider contractGasProvider,
      String _lrcTokenAddress,
      String _wethTokenAddress,
      String _delegateAddress,
      String _tradeHistoryAddress,
      String _orderBrokerRegistryAddress,
      String _orderRegistryAddress,
      String _feeHolderAddress,
      String _orderBookAddress,
      String _burnRateTableAddress) {
    String encodedConstructor =
        FunctionEncoder.encodeConstructor(
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.Address(_lrcTokenAddress),
                new org.web3j.abi.datatypes.Address(_wethTokenAddress),
                new org.web3j.abi.datatypes.Address(_delegateAddress),
                new org.web3j.abi.datatypes.Address(_tradeHistoryAddress),
                new org.web3j.abi.datatypes.Address(_orderBrokerRegistryAddress),
                new org.web3j.abi.datatypes.Address(_orderRegistryAddress),
                new org.web3j.abi.datatypes.Address(_feeHolderAddress),
                new org.web3j.abi.datatypes.Address(_orderBookAddress),
                new org.web3j.abi.datatypes.Address(_burnRateTableAddress)));
    return deployRemoteCall(
        RingSubmitter.class,
        web3j,
        transactionManager,
        contractGasProvider,
        BINARY,
        encodedConstructor);
  }

  @Deprecated
  public static RemoteCall<RingSubmitter> deploy(
      Web3j web3j,
      Credentials credentials,
      BigInteger gasPrice,
      BigInteger gasLimit,
      String _lrcTokenAddress,
      String _wethTokenAddress,
      String _delegateAddress,
      String _tradeHistoryAddress,
      String _orderBrokerRegistryAddress,
      String _orderRegistryAddress,
      String _feeHolderAddress,
      String _orderBookAddress,
      String _burnRateTableAddress) {
    String encodedConstructor =
        FunctionEncoder.encodeConstructor(
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.Address(_lrcTokenAddress),
                new org.web3j.abi.datatypes.Address(_wethTokenAddress),
                new org.web3j.abi.datatypes.Address(_delegateAddress),
                new org.web3j.abi.datatypes.Address(_tradeHistoryAddress),
                new org.web3j.abi.datatypes.Address(_orderBrokerRegistryAddress),
                new org.web3j.abi.datatypes.Address(_orderRegistryAddress),
                new org.web3j.abi.datatypes.Address(_feeHolderAddress),
                new org.web3j.abi.datatypes.Address(_orderBookAddress),
                new org.web3j.abi.datatypes.Address(_burnRateTableAddress)));
    return deployRemoteCall(
        RingSubmitter.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
  }

  @Deprecated
  public static RemoteCall<RingSubmitter> deploy(
      Web3j web3j,
      TransactionManager transactionManager,
      BigInteger gasPrice,
      BigInteger gasLimit,
      String _lrcTokenAddress,
      String _wethTokenAddress,
      String _delegateAddress,
      String _tradeHistoryAddress,
      String _orderBrokerRegistryAddress,
      String _orderRegistryAddress,
      String _feeHolderAddress,
      String _orderBookAddress,
      String _burnRateTableAddress) {
    String encodedConstructor =
        FunctionEncoder.encodeConstructor(
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.Address(_lrcTokenAddress),
                new org.web3j.abi.datatypes.Address(_wethTokenAddress),
                new org.web3j.abi.datatypes.Address(_delegateAddress),
                new org.web3j.abi.datatypes.Address(_tradeHistoryAddress),
                new org.web3j.abi.datatypes.Address(_orderBrokerRegistryAddress),
                new org.web3j.abi.datatypes.Address(_orderRegistryAddress),
                new org.web3j.abi.datatypes.Address(_feeHolderAddress),
                new org.web3j.abi.datatypes.Address(_orderBookAddress),
                new org.web3j.abi.datatypes.Address(_burnRateTableAddress)));
    return deployRemoteCall(
        RingSubmitter.class,
        web3j,
        transactionManager,
        gasPrice,
        gasLimit,
        BINARY,
        encodedConstructor);
  }

  public static class RingMinedEventResponse {
    public Log log;

    public byte[] _ringHash;

    public String _feeRecipient;

    public BigInteger _ringIndex;

    public byte[] _fills;
  }

  public static class InvalidRingEventResponse {
    public Log log;

    public byte[] _ringHash;
  }
}
