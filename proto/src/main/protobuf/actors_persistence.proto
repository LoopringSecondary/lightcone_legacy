/*
 * Copyright 2018 Loopring Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
package org.loopring.lightcone.proto;

import "core_data.proto";
import "persistence.proto";

message XSaveOrderResult {
    RawOrder order    = 1;
    bool already_exist      = 2;
    ErrorCode error = 3;
}

message XSaveOrderReq {
    RawOrder order    = 1;
}

message XUpdateOrderStateReq {
    string hash = 1;
    RawOrder.State state = 2;
    bool changeUpdatedAtField = 3;
}

message XUpdateOrderStateRes {
    ErrorCode error = 1;
}

message XUpdateOrderStatusReq {
    string hash = 1;
    OrderStatus status = 2;
    bool changeUpdatedAtField = 3;
}

message XUpdateOrderStatusRes {
    ErrorCode error = 1;
}

message GetOrdersByHashesReq {
    repeated string hashes = 1;
}

message GetOrdersByHashesRes {
    repeated RawOrder orders = 1;
    ErrorCode error = 2;
}

message GetOrderByHashReq {
    string hash = 1;
}

message GetOrderByHashRes {
    RawOrder order = 1;
    ErrorCode error = 2;
}

message XSaveOrderStateResult {
    RawOrder state    = 1;
    ErrorCode error = 3;
}

message XSaveOrderStateReq {
    RawOrder state    = 1;
}

message MarketPair {
    string token_s  = 1;
    string token_b  = 2;
}

message GetOrdersForUserReq {
    oneof market {
        MarketPair pair        = 1; // tokenS -> tokenB
        string     market_hash = 2; // tokenS -> tokenB && tokenB -> tokenS
    }
    string   owner                 = 3;
    repeated OrderStatus statuses = 4;
    SortingType    sort                  = 5;
    Paging    skip                  = 6;
}

message GetOrdersForUserResult {
    repeated RawOrder orders = 1;
    ErrorCode error = 2;
}

message XUserCancelOrderReq {
    repeated string order_hashes = 1;
}

message XUserCancelOrderResult {
    message Result {
        string     order_hash = 1;
        RawOrder  order      = 2;
        ErrorCode error      = 3;
    }
    repeated Result updated_result = 1;
}

message GetTradesReq {
    oneof market {
        MarketPair pair        = 1; // tokenS -> tokenB
        string     market_hash = 2; // tokenS -> tokenB && tokenB -> tokenS
    }
    string owner   = 3;
    SortingType sort     = 4;
    Paging skip     = 5;
}

message GetTradesResult {
    repeated Trade  trades = 1;
    ErrorCode       error  = 2;
}

message XSaveSettlementTxReq {
    SettlementTx tx = 1;
}

message XSaveSettlementTxResult {
    ErrorCode error = 1;
}

message GetPendingTxsReq {
    string owner       = 1; // required
    int64  time_before = 2; // create_at <= time_before
}

message GetPendingTxsResult {
    repeated SettlementTx txs = 1;
}

message XUpdateTxInBlockReq {
    string tx_hash = 1;
    string from    = 2;
    int64  nonce   = 3;
}

message XUpdateTxInBlockResult {
    ErrorCode error = 1;
}