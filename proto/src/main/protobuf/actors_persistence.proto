/*
 * Copyright 2018 Loopring Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
package org.loopring.lightcone.proto;

import "common.proto";
import "core.proto";
import "actors_data.proto";
import "ethereum.proto";

/////////////////////////////////////////////////////////////////////
// TWO WAY DATABASE-RELATED REQUEST-RESPONSES
/////////////////////////////////////////////////////////////////////

message PersistOrder {
    // message Req {
    //     RawOrder order    = 1;
    // }
    message Res {
        RawOrder order    = 1;
        bool already_exist      = 2;
        ErrorCode error = 3;
    }
}

message UpdateOrderState {
    message Req {
        string hash = 1;
        RawOrder.State state = 2;
        bool changeUpdatedAtField = 3;
    }

    message Res {
        ErrorCode error = 1;
    }
}

message UpdateOrderStatus {
    message Req {
        string hash = 1;
        OrderStatus status = 2;
        bool changeUpdatedAtField = 3;
    }

    message Res {
        ErrorCode error = 1;
}
}

message GetOrderByHash {
    message Req {
        string hash = 1;
    }

    message Res {
        RawOrder order = 1;
        ErrorCode error = 2;
    }

    message BatchReq {
        repeated string hashes = 1;
    }

    message BatchRes {
        repeated RawOrder orders = 1;
        ErrorCode error = 2;
    }
}


message GetOrdersForUser {
    message Req {
        oneof market {
            MarketPair pair        = 1; // tokenS -> tokenB
            string     market_hash = 2; // tokenS -> tokenB && tokenB -> tokenS
        }
        string   owner                 = 3;
        repeated OrderStatus statuses = 4;
        SortingType    sort                  = 5;
        Paging    skip                  = 6;
    }

    message Res {
        repeated RawOrder orders = 1;
        ErrorCode error = 2;
    }
}

message UserCancelOrder {
    // message Req {
    //     repeated string order_hashes = 1;
    // }

    message Res {
        message Result {
            string    order_hash = 1;
            RawOrder  order      = 2;
            ErrorCode error      = 3;
        }
        repeated Result updated_result = 1;
    }
}

message GetTrades {
    message Req {
        oneof market {
            MarketPair pair        = 1; // tokenS -> tokenB
            string     market_hash = 2; // tokenS -> tokenB && tokenB -> tokenS
        }
        string owner   = 3;
        SortingType sort     = 4;
        Paging skip     = 5;
    }

    message Res {
        repeated Trade  trades = 1;
        ErrorCode       error  = 2;
    }
}

message PersistSettlementTx {
    message Req {
        SettlementTx tx = 1;
    }

    message Res {
        ErrorCode error = 1;
    }
}

message GetPendingTxs {
    message Req {
        string owner       = 1; // required
        int64  time_before = 2; // create_at <= time_before
    }

    message Res {
        repeated SettlementTx txs = 1;
    }
}

message UpdateTxInBlock {
    message Req {
        string tx_hash = 1;
        string from    = 2;
        int64  nonce   = 3;
    }

    message Res {
        ErrorCode error = 1;
    }
}

message TransactionRecord {
    enum RecordType {
        TRANSFER        = 0;
        ERC20_TRANSFER  = 1;
        ORDER_FILLED    = 2;
        ORDER_CANCELLED = 3;
    }
    message EventData {
        oneof event {
            TransferEvent        transfer       = 101;
            OrdersCancelledEvent orderCancelled = 102;
            CutoffEvent          cutoff         = 103;
            OrderFilledEvent     filled         = 104;
        }
    }
    EventHeader header       = 1;
    string      owner        = 2;
    RecordType  record_type  = 3;
    string      trading_pair = 4;
    string      market       = 5; // LRC-WETH
    int64       sequence_id  = 6;
    EventData   event_data   = 7;
}

message PersistTransactionRecord {
    message Req {
        TransactionRecord transaction   = 1;
    }
    message Res {
        bool       already_exist = 1;
        ErrorCode  error         = 2;
    }
}

message GetTransactionRecords {
    message QueryType {
        TransactionRecord.RecordType value  = 1;
    }
    message Req {
        string        owner       = 1;
        QueryType     query_type  = 2;
        SortingType   sort        = 3;
        CursorPaging  paging      = 4;
    }

    message Res {
        repeated TransactionRecord transactions = 1;
    }
}

message GetTransactionRecordCount {
    message Req {
        string                     owner       = 1;
        GetTransactionRecords.QueryType  query_type  = 2;
    }

    message Res {
        int32 count = 1;
    }
}

message PersistRawData {
    message Req {
        OHLCRawData data    = 1;
    }
    message Res {
        OHLCRawData record  = 1;
        ErrorCode error     = 2;
    }
}

message GetOHLCData {
    message Req {
        string  marketId    = 1;
        int64   interval    = 2;
        int64   beginTime   = 3;
        int64   endTime     = 4;
    }

    message Res {
        repeated OHLCData data = 1;
    }
}