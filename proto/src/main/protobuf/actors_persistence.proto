/*
 * Copyright 2018 Loopring Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
package org.loopring.lightcone.proto;

import "core_data.proto";
import "persistence.proto";

message XSaveOrderResult {
    XRawOrder order    = 1;
    bool already_exist      = 2;
    XErrorCode error = 3;
}

message XSaveOrderReq {
    XRawOrder order    = 1;
}

message XUpdateOrderStateReq {
    string hash = 1;
    XRawOrder.State state = 2;
    bool changeUpdatedAtField = 3;
}

message XUpdateOrderStateRes {
    XErrorCode error = 1;
}

message XUpdateOrderStatusReq {
    string hash = 1;
    XOrderStatus status = 2;
    bool changeUpdatedAtField = 3;
}

message XUpdateOrderStatusRes {
    XErrorCode error = 1;
}

message XGetOrdersByHashesReq {
    repeated string hashes = 1;
}

message XGetOrdersByHashesRes {
    repeated XRawOrder orders = 1;
    XErrorCode error = 2;
}

message XGetOrderByHashReq {
    string hash = 1;
}

message XGetOrderByHashRes {
    XRawOrder order = 1;
    XErrorCode error = 2;
}

message XSaveOrderStateResult {
    XRawOrder state    = 1;
    XErrorCode error = 3;
}

message XSaveOrderStateReq {
    XRawOrder state    = 1;
}

message MarketPair {
    string token_s  = 1;
    string token_b  = 2;
}

message XGetOrdersReq {
    oneof market {
        MarketPair pair        = 1; // tokenS -> tokenB
        string     market_hash = 2; // tokenS -> tokenB && tokenB -> tokenS
    }
    string   owner                 = 3;
    repeated XOrderStatus statuses = 4;
    XSort    sort                  = 5;
    XSkip    skip                  = 6;
}

message XGetOrdersResult {
    repeated XRawOrder orders = 1;
    XErrorCode error = 2;
}

message XGetTradesReq {
    oneof market {
        MarketPair pair        = 1; // tokenS -> tokenB
        string     market_hash = 2; // tokenS -> tokenB && tokenB -> tokenS
    }
    string owner   = 3;
    XSort sort     = 4;
    XSkip skip     = 5;
}

message XGetTradesResult {
    repeated XTrade  trades = 1;
    XErrorCode       error  = 2;
}