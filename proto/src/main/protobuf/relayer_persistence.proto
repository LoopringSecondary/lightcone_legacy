/*
 * Copyright 2018 Loopring Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
package io.lightcone.relayer.data;

import "core.proto";
import "persistence.proto";
import "ethereum_persistence.proto";
import "relayer_common.proto";
import "ethereum_event.proto";

/////////////////////////////////////////////////////////////////////
// TWO WAY DATABASE-RELATED REQUEST-RESPONSES
/////////////////////////////////////////////////////////////////////

message PersistOrder {
    // message Req {
    //     io.lightcone.core.RawOrder  order    = 1;
    // }
    message Res {
        io.lightcone.core.RawOrder  order    = 1;
        bool already_exist      = 2;
        io.lightcone.core.ErrorCode error = 3;
    }
}

message UpdateOrderState {
    message Req {
        string hash = 1;
        io.lightcone.core.RawOrder.State state = 2;
        bool changeUpdatedAtField = 3;
    }

    message Res {
        io.lightcone.core.ErrorCode error = 1;
    }
}

message UpdateOrderStatus {
    message Req {
        string hash = 1;
        io.lightcone.core.OrderStatus status = 2;
        bool changeUpdatedAtField = 3;
    }

    message Res {
        io.lightcone.core.ErrorCode error = 1;
}
}

message GetOrderByHash {
    message Req {
        string hash = 1;
    }

    message Res {
        io.lightcone.core.RawOrder  order = 1;
        io.lightcone.core.ErrorCode error = 2;
    }

    message BatchReq {
        repeated string hashes = 1;
    }

    message BatchRes {
        repeated io.lightcone.core.RawOrder  orders = 1;
        io.lightcone.core.ErrorCode error = 2;
    }
}


message GetOrders {
    message Req {
        string                                 owner       = 1;
        repeated io.lightcone.core.OrderStatus statuses    = 2;
        MarketFilter                           market      = 3;
        io.lightcone.persistence.SortingType   sort        = 4;
        io.lightcone.persistence.CursorPaging  paging      = 5;
    }

    message Res {
        repeated io.lightcone.core.RawOrder  orders = 1;
    }
}

message UserCancelOrder {
    // message Req {
    //     repeated string order_hashes = 1;
    // }

    message Res {
        message Result {
            string    order_hash        = 1;
            io.lightcone.core.RawOrder   order             = 2;
            io.lightcone.core.ErrorCode error             = 3;
        }
        repeated Result updated_result = 1;
    }
}

message PersistSettlementTx {
    message Req {
        io.lightcone.persistence.SettlementTx tx = 1;
    }

    message Res {
        io.lightcone.core.ErrorCode error = 1;
    }
}

message GetPendingTxs {
    message Req {
        string owner       = 1; // required
        int64  time_before = 2; // create_at <= time_before
    }

    message Res {
        repeated io.lightcone.persistence.SettlementTx txs = 1;
    }
}

message UpdateTxInBlock {
    message Req {
        string tx_hash = 1;
        string from    = 2;
        int64  nonce   = 3;
    }

    message Res {
        io.lightcone.core.ErrorCode error = 1;
    }
}

message GetMarketHistory {
    message Req {
        io.lightcone.core.MarketPair                 market_pair    = 1;
        io.lightcone.ethereum.persistence.Interval   interval       = 2;
        int64                                        begin_time     = 3;
        int64                                        end_time       = 4;
    }

    message Res {
        repeated io.lightcone.ethereum.persistence.OHLCData data  = 1;
    }
}

message UpdateTokenBurnRate {
    message Req {
        string address  = 1;
    }

    message Res {
        io.lightcone.core.ErrorCode  error = 1;
    }
}

message InvalidateToken {
    message Req {
        string address = 1;
    }

    message Res {
        io.lightcone.core.ErrorCode  error = 1;
    }
}

message SaveMarketMetadatas {
    message Req {
        repeated io.lightcone.core.MarketMetadata markets = 1;
    }

    message Res {
        repeated string market_hash = 1;
    }
}

message UpdateMarketMetadata {
    message Req {
        io.lightcone.core.MarketMetadata market = 1;
    }

    message Res {
        io.lightcone.core.ErrorCode  error = 1;
    }
}

message TerminateMarket {
    message Req {
        string   market_hash  = 1;
    }

    message Res {
        io.lightcone.core.ErrorCode  error = 1;
    }
}
