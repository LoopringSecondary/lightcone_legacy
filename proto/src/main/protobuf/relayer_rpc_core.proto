/*
 * Copyright 2018 Loopring Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
package io.lightcone.relayer.data;

import "core.proto";
import "ethereum.proto";
import "ethereum_persistence.proto";
import "persistence.proto";
import "relayer_common.proto";
import "google/protobuf/wrappers.proto";

/////////////////////////////////////////////////////////////////////
// ONE WAY MESSAGES
/////////////////////////////////////////////////////////////////////

message Notify {
    string message = 1;
    string param = 2;
}

message SubmitSimpleOrder {
    string owner = 1;
    Order order = 2;
}

message TriggerRematch {
    bool sell_order_as_taker = 1;
    int32 offset = 2;
}

message SettleRings {
    repeated OrderRing rings = 1;
    io.lightcone.core.Amount gas_limit = 2;
    io.lightcone.core.Amount gas_price = 3;
}



message OrderStatusMonitor {
    string monitoring_type = 1;
    int64 process_time = 2;

    enum MonitoringType {
        MONITORING_ACTIVATE = 0;
        MONITORING_EXPIRE = 1;
    }
}

/////////////////////////////////////////////////////////////////////
// TWO WAY REQUEST-RESPONSES (DB RELATD NOT INCLUDED)
/////////////////////////////////////////////////////////////////////

message SubmitOrder {
    message Req {
        io.lightcone.core.RawOrder raw_order = 1;
    }

    message Res {
        Order order = 1;
        bool success = 2;
    }
}

message CancelOrder {
    message Req {
        string id = 1;
        string owner = 2;
        io.lightcone.core.OrderStatus status = 3; //取消的类型
        io.lightcone.core.MarketPair market_pair = 4;
        io.lightcone.core.Amount time = 5;
        string sig = 6;
    }

    message Res {
        io.lightcone.core.ErrorCode error = 1;
        io.lightcone.core.OrderStatus status = 2; //取消的类型
    }
}

message RetrieveOrdersToCancel {
    string broker       = 1;
    string owner        = 2;
    string market_hash  = 3;
    int64  cutoff       = 4; // in seconds.
}

message GetOrderbook {
    message Req {
        int32 level = 2;
        int32 size = 1;
        io.lightcone.core.MarketPair market_pair = 3;
    }

    message Res {
        io.lightcone.core.Orderbook orderbook = 1;
    }
}

message GetOrderFilledAmount {
    message Req {
        string order_id = 1;
    }

    message Res {
        string order_id = 1;
        io.lightcone.core.Amount filled_amount_s = 2;
    }
}

message GetAccountNonce {
    message Req {
        string address = 1;
//        string tag = 2;
    }

    message Res {
        int64 nonce = 1;
    }
}

message GetAccount {
    message Req {
        string address = 1;
        repeated string tokens = 2;
        bool all_tokens = 3;
        string tag = 4;
    }

    message Res {
        AccountBalance account_balance    = 1;
    }
}

message GetAccounts {
    message Req {
        repeated string addresses = 1;
        repeated string tokens = 2;
        bool all_tokens = 3;
        string tag = 4;
    }

    message Res {
        map<string, AccountBalance> account_balances    = 1;
    }
}

message GetActivities {
    message Req {
        string owner = 1;
        google.protobuf.StringValue token = 2;
        io.lightcone.persistence.CursorPaging paging = 3;
    }

    message Res {
        repeated io.lightcone.ethereum.persistence.Activity activities = 1;
    }
}

message GetPendingActivityNonce {
    message Req {
        string from = 1;
        int32 limit = 2;
    }

    message Res {
        repeated int64 nonces = 2;
    }
}

message UpdateFilledAmount {
    message Req {
        string id = 1;
        io.lightcone.core.Amount order_filled_amount_s = 2;
    }

    message Res {
        io.lightcone.core.ErrorCode error = 1;
    }
}

message GetFilledAmount {
    message Req {
        repeated string order_ids = 1;
        string tag = 2;
    }

    message Res {
        map<string, io.lightcone.core.Amount> filled_amount_s_map = 1;
    }
}

message GetOrderCancellation {
    message Req {
        string broker = 1;
        string order_hash = 2;
        string tag = 3;
    }

    message Res {
       bool  cancelled = 1;
       int64 block = 2;
    }
}

// TODO(yadong): return block for cutoff.
message GetCutoff {
    message Req {
        string broker = 1;
        string owner = 2;
        string market_hash = 3;
        string tag = 4;
    }
    message Res {
        string broker = 1;
        string owner = 2;
        string market_hash = 3;
        io.lightcone.core.Amount cutoff = 4;
    }
}

message BatchGetCutoffs {
    message Req {
        repeated GetCutoff.Req reqs = 1;
        string tag = 2;
    }

    message Res {
        repeated GetCutoff.Res resps = 1;
    }
}

message GetBurnRate {
    message Req {
        string token = 1;
        string tag  = 2;
    }
    message Res {
        io.lightcone.core.BurnRate burn_rate = 1;
        int64 block = 2;
    }
}

message SendRawTx {
    message Req {
        bytes data = 1;
    }

    message Res {
        SendStatus status = 1;
        enum SendStatus {
            SEND_STATUS_UNKNOW = 0;
            SEND_STATUS_SUCCESS = 1;
        }
    }
}

message GetGasPrice {
    message Req {}

    message Res {
        io.lightcone.core.Amount gas_price = 1;
    }
}

message SetGasPrice {
    message Req {
        io.lightcone.core.Amount gas_price = 1;
    }

    message Res {
        io.lightcone.core.Amount gas_price = 1;
    }
}

message GetNodeBlockHeight {
    message Req{}

    message Res{
        repeated NodeBlockHeight nodes = 1;
    }
}

message MetadataChanged {

}

message SubscribeMetadataChanged {
}

message GetMarkets {
    message Req {
        bool require_metadata = 1;
        bool require_ticker = 2;
        bool query_loopring_ticker = 3;
        io.lightcone.core.Currency quote_currency_for_ticker = 4;  // USD, RMB
        repeated io.lightcone.core.MarketPair market_pairs = 5; // empty for query all
    }

    message Res {
        repeated io.lightcone.core.Market markets = 1;
    }
}

message GetTokens {
    message Req {
        bool require_metadata = 1;
        bool require_info = 2;
        bool require_price = 3;
        io.lightcone.core.Currency quote_currency_for_price = 4;  // USD, RMB
        repeated string tokens = 5; // addresses
    }

    message Res {
        repeated io.lightcone.core.Token tokens = 1;
    }
}

message GetOrderbookSlots {
    message Req {
        io.lightcone.core.MarketPair market_pair      = 1;
        int32 num_of_slots      = 2;
    }

    message Res {
        io.lightcone.core.Orderbook.Update update = 1;
    }
}

message GetFills {
    message Req {
        message RingFilter {
            string  ring_hash         = 1;
            string  ring_index        = 2; // 用string是为了避免定义成int时默认值是0，ringIndex和fillIndex从0开始
            string  fill_index        = 3;
        }
        string        owner      = 1;
        string        tx_hash    = 2;
        string        order_hash = 3;
        io.lightcone.core.MarketPair  market_pair = 4;
        RingFilter    ring       = 5;
        string        wallet     = 6;
        string        miner      = 7;
        io.lightcone.persistence.SortingType sort       = 8;
        io.lightcone.persistence.Paging      paging     = 9;
    }

    message Res {
        repeated io.lightcone.ethereum.persistence.Fill fills   = 1;
        int32   total  = 2;
    }
}

message GetFillHistory {
    message Req {
        io.lightcone.core.MarketPair  market_pair = 1;
    }

    message Res {
        repeated io.lightcone.ethereum.persistence.Fill fills   = 1;
    }
}

message GetRings {
    message Req {
        oneof filter {
            string ring_hash  = 1;
            int64  ring_index = 2;
        }
        io.lightcone.persistence.SortingType sort       = 3;
        io.lightcone.persistence.Paging      paging     = 4;
    }

    message Res {
        repeated io.lightcone.ethereum.persistence.Ring rings = 1;
        int32 total = 2;
    }
}

message GetTime{

    message Req{

    }

    message Res{
        io.lightcone.core.Amount timestamp = 1;
    }

}
