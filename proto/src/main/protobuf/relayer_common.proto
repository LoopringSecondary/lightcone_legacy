/*
 * Copyright 2018 Loopring Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
package io.lightcone.relayer.data;

import "core.proto";
// import "ethereum.proto";

message OrderState {
    io.lightcone.core.Amount amount_s          = 1;
    io.lightcone.core.Amount amount_b          = 2;
    io.lightcone.core.Amount amount_fee        = 3;
}

message Order {
    string id                       = 1;
    string token_s                  = 2;
    string token_b                  = 3;
    string token_fee                = 4;
    io.lightcone.core.Amount amount_s                  = 5;
    io.lightcone.core.Amount amount_b                  = 6;
    io.lightcone.core.Amount amount_fee                = 7;
    int64 valid_since               = 8;
    int64 submitted_at              = 9;
    int32 num_attempts              = 10;
    io.lightcone.core.OrderStatus status              = 11;
    double wallet_split_percentage  = 12;
    OrderState outstanding          = 13;
    OrderState reserved             = 14;
    OrderState actual               = 15;
    OrderState matchable            = 16;
}

message ExpectedOrderFill {
    Order order                     = 1;
    OrderState pending              = 2;
    io.lightcone.core.Amount amount_margin             = 3;
}

message OrderRing {
    ExpectedOrderFill maker         = 1;
    ExpectedOrderFill taker         = 2;
}


message BalanceAndAllowance {
    io.lightcone.core.Amount balance                   = 1;
    io.lightcone.core.Amount allowance                 = 2;
    io.lightcone.core.Amount available_balance         = 3;
    io.lightcone.core.Amount available_allowance       = 4;
}

message EthereumProxySettings {
    message Node {
        string host                 = 1;
        int32  port                 = 2;
        string ipcPath              = 3;
    }
    int32 pool_size                 = 1;
    int32 check_interval_seconds    = 2;
    float healthy_threshold         = 3;
    repeated Node nodes             = 4;
}

message Ring {
    message Fees {
        repeated Trade.Fee fees = 1;
    }
    string   ring_hash         = 1;
    int64    ring_index        = 2;
    int32    fills_amount      = 3;
    string   miner             = 4;
    string   tx_hash           = 5;
    Fees     fees              = 6;
    int64    block_height      = 7;
    int64    block_timestamp   = 8;
}

message Trade {
    message Fee {
        // for market
        string token_fee               = 1;
        io.lightcone.core.Amount  amount_fee              = 2;
        // for p2p
        io.lightcone.core.Amount  fee_amount_s            = 3;
        io.lightcone.core.Amount  fee_amount_b            = 4;

        string fee_recipient           = 5;
        int32  waive_fee_percentage    = 6; // miner waive
        int32  wallet_split_percentage = 7;
    }

    string owner             = 1;
    string order_hash        = 2;
    string ring_hash         = 3;
    int64  ring_index        = 4;
    int32  fill_index        = 5;
    string tx_hash           = 6;
    io.lightcone.core.Amount  amount_s          = 7;
    io.lightcone.core.Amount  amount_b          = 8;
    string token_s           = 9;
    string token_b           = 10;
    int64  market_id         = 11;
    io.lightcone.core.Amount  split             = 12; // tokenS
    Fee    fee               = 13;
    string wallet            = 14;
    string miner             = 15;
    int64  block_height      = 16;
    int64  block_timestamp   = 17;
}

message SettlementTx {
    enum Status {
        PENDING  = 0;
        BLOCK    = 1;
        FAILED   = 2;
    }
    string  tx_hash    = 1;
    string  from       = 2;
    string  to         = 3;
    string  gas        = 4;
    string  gasPrice   = 5;
    string  value      = 6;
    string  data       = 7;
    int64   nonce      = 8;
    Status  status     = 9;
    int64   create_at  = 10;
    int64   updated_at = 11;
}

message NodeBlockHeight{
    string node_name = 1;
    int64  height    = 2;
}

message MissingBlocksRecord {
    int64 block_start = 1;
    int64 block_end = 2;
    int64 last_handled_block = 3;
    int64 sequence_id = 4;
}

// Used as statistical data, such as a histogram


message OHLCData {
    repeated  double  data      = 1;
    /*int64    starting_point   = 2;
    double     quality          = 3;
    double     amount           = 4;
    double     opening_price    = 5;
    double     closing_price    = 6;
    double     highest_price    = 7;
    double     lowest_price     = 8;*/
}
