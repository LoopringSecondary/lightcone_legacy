/*
 * Copyright 2018 Loopring Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
package org.loopring.lightcone.proto.core;

enum XOrderStatus {
    NEW = 0;
    PENDING = 1;
    EXPIRED = 2;
    DUST_ORDER = 3;
    PARTIALLY_FILLED = 4;
    COMPLETELY_FILLED = 5; // 完全成交
    INVALID_DATA = 6;
    UNSUPPORTED_MARKET = 7;
    CANCELLED_BY_USER = 8;
    CANCELLED_LOW_BALANCE = 9;
    CANCELLED_LOW_FEE_BALANCE = 10;
    CANCELLED_TOO_MANY_ORDERS = 11;
    CANCELLED_TOO_MANY_FAILED_SETTLEMENTS = 12;
    CANCELLED_DUPLICIATE = 13;
}

message XMarketId {
    string primary = 1;
    string secondary = 2;
}

message XMarketManagerConfig {
    int32 maxNumbersOfOrders = 1;
    int32 priceDecimals = 2;
}


enum XMatchingFailure {
    NO_ERROR = 0;
    ORDERS_NOT_TRADABLE = 1;
    INCOME_TOO_SMALL = 2;
    MAKER_COMPLETELY_FILLED = 3;
    TAKER_COMPLETELY_FILLED = 4;
    INVALID_MAKER_ORDER = 5;
    INVALID_TAKER_ORDER = 6;
}


// For ABC/XYZ market, ABC is secondary, XYZ is primary

message MarketMetadata {
    int32 numBuys = 1;
    int32 numSells = 2;
    int32 numHiddenBuys = 3;
    int32 numHiddenSells = 4;
    double bestBuyPrice = 5;
    double bestSellPrice = 6;
    double lastPrice = 7;
    bool isLastTakerSell = 8;
}

message XOrderbook {
    message XItem {
        string price = 1;
        string amount = 2;
        string total = 3;
    }
    repeated XItem sells = 1;
    repeated XItem buys = 2;
}

message XOrderbookConfig {
    int32 levels = 1;
    int32 priceDecimals = 2;
    int32 precisionForAmount = 3;
    int32 precisionForTotal = 4;
}

message XOrderbookUpdate {
    message XSlot {
        int64 slot = 1;
        double amount = 2;
        double total = 3;
    }
    repeated XSlot sells = 1;
    repeated XSlot buys = 2;
}

message GetXOrderbookReq {
   int32 level = 1;
   int32 size = 2;
}

message GetXOrderbookRes {
   XOrderbook orderbook = 1;
}

message XTokenMetadata {
    string address = 1;
    int32 decimals = 2;
    double burnRate = 3;
    double currentPrice = 4;
}



