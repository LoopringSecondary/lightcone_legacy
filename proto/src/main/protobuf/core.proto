/*
 * Copyright 2018 Loopring Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
package io.lightcone.core;


/////////////////////////////////////////////////////////////////////
// CONTAINS DATA USED BY THE CORE SUB-PROJECT, ONLY!!!
/////////////////////////////////////////////////////////////////////

enum OrderStatus {
    STATUS_NEW                      = 0;
    STATUS_PENDING                  = 1;
    STATUS_EXPIRED                  = 2;
    STATUS_DUST_ORDER               = 3;
    STATUS_PARTIALLY_FILLED         = 4;
    STATUS_COMPLETELY_FILLED        = 5;
    STATUS_PENDING_ACTIVE           = 6;

    STATUS_ONCHAIN_CANCELLED_BY_USER                    = 10;
    STATUS_ONCHAIN_CANCELLED_BY_USER_TRADING_PAIR       = 11;

    STATUS_SOFT_CANCELLED_BY_USER                       = 12;
    STATUS_SOFT_CANCELLED_BY_USER_TRADING_PAIR          = 13;
    STATUS_SOFT_CANCELLED_BY_DISABLED_MARKET            = 14;
    STATUS_SOFT_CANCELLED_LOW_BALANCE                   = 15;
    STATUS_SOFT_CANCELLED_LOW_FEE_BALANCE               = 16;
    STATUS_SOFT_CANCELLED_TOO_MANY_ORDERS               = 17;
    STATUS_SOFT_CANCELLED_DUPLICIATE                    = 18;
    STATUS_SOFT_CANCELLED_TOO_MANY_RING_FAILURES        = 19;

    STATUS_INVALID_DATA                 = 201;
    STATUS_UNSUPPORTED_MARKET           = 202;
}

enum ErrorCode{
    ERR_NONE                = 0;
    ERR_INTERNAL_UNKNOWN    = 1;
    ERR_INVALID_ARGUMENT    = 2;

    //1001 -- 2000 Matching Error
    ERR_MATCHING_ORDERS_NOT_TRADABLE            = 1001;
    ERR_MATCHING_INCOME_TOO_SMALL               = 1002;
    ERR_MATCHING_MAKER_COMPLETELY_FILLED        = 1003;
    ERR_MATCHING_TAKER_COMPLETELY_FILLED        = 1004;
    ERR_MATCHING_INVALID_MAKER_ORDER            = 1005;
    ERR_MATCHING_INVALID_TAKER_ORDER            = 1006;
    ERR_MATCHING_TOKEN_METADATA_UNAVAILABLE     = 1007;
    ERR_MATCHING_INVALID_INTERNAL_STATE         = 1008;

    // 2001 -- 3000 Order Error
    ERR_ORDER_VALIDATION_INVALID_OWNER                      = 2001;
    ERR_ORDER_VALIDATION_INVALID_TOKENS                     = 2002;
    ERR_ORDER_VALIDATION_INVALID_TOKENB                     = 2003;
    ERR_ORDER_VALIDATION_INVALID_TOKEN_AMOUNT               = 2004;
    ERR_ORDER_VALIDATION_INVALID_WAIVE_PERCENTAGE           = 2005;
    ERR_ORDER_VALIDATION_INVALID_FEE_PERCENTAGE             = 2006;
    ERR_ORDER_VALIDATION_INVALID_WALLET_SPLIT_PERCENTAGE    = 2007;
    ERR_ORDER_VALIDATION_INVALID_MISSING_DUALAUTH_PRIV_KEY  = 2008;
    ERR_ORDER_VALIDATION_UNSUPPORTED_VERSION                = 2009;
    ERR_ORDER_VALIDATION_INVALID_SIG                        = 2010;
    ERR_ORDER_VALIDATION_INVALID                            = 2011;
    ERR_ORDER_VALIDATION_INVALID_CUTOFF                     = 2012;
    ERR_ORDER_VALIDATION_INVALID_CUTOFF_TRADING_PAIR        = 2013;
    ERR_ORDER_VALIDATION_NOT_PERSISTED                      = 2014;
    ERR_ORDER_VALIDATION_INVALID_CANCELED                   = 2015;
    ERR_ORDER_VALIDATION_INVALID_CANCEL_SIG                 = 2016;

    // submitRings param deserialize error
    ERR_SERIALIZATION_ENCODED_DATA_INVALID                  = 2101;
    // EIP712 typed json data format error
    ERR_EIP712_INVALID_JSON_DATA                            = 2201;

    //3001 -- 4000 relayer error
    ERR_ORDER_ALREADY_EXIST             = 3001;
    ERR_ORDER_NOT_EXIST                 = 3002;
    ERR_ORDER_INVALID_AMOUNT_S          = 3003;
    ERR_LOW_BALANCE                     = 3004;
    ERR_LOW_FEE_BALANCE                 = 3005;
    ERR_TOKEN_NOT_EXIST                 = 3006;
    ERR_TOO_MANY_ORDERS                 = 3007;
    ERR_TOO_MANY_FAILED_MATCHES         = 3008;
    ERR_INVALID_ORDER_DATA              = 3009;
    ERR_INVALID_MARKET                  = 3010;
    ERR_UNEXPECTED_ACTOR_MSG            = 3011;
    ERR_UNSUPPORTED_MESSAGE             = 3012;
    ERR_FAILED_HANDLE_MSG               = 3013;
    ERR_REJECTED_DURING_RECOVER         = 3014;
    ERR_ACTOR_NOT_READY                 = 3015;
    ERR_ORDER_PENDING_ACTIVE            = 3016;

    //4001 -- 5000 persistence Error
    ERR_PERSISTENCE_INVALID_DATA        = 4001;
    ERR_PERSISTENCE_DUPLICATE_INSERT    = 4002;
    ERR_PERSISTENCE_UPDATE_FAILED       = 4003;
    ERR_PERSISTENCE_INTERNAL            = 4004;

    //5001 -- 6000 ethereum Error
    ERR_ETHEREUM_ILLEGAL_ADDRESS        = 5001;
    ERR_NO_ACCESSIBLE_ETHEREUM_NODE     = 5002;
    ERR_UNEXPECTED_RESPONSE             = 5003;
    // 5005 and beyound for other

}

message Error{
    ErrorCode code = 1;
    string message = 2;
}

// For LRC-WETH market, the base_token is LRC, quote_token is WETH
message MarketPair {
    string base_token = 1;
    string quote_token = 2;
}

message Orderbook {
    message Item {
        string price = 1;
        string amount = 2;
        string total = 3;
    }

    message Slot {
        int64 slot = 1;
        double amount = 2;
        double total = 3;
    }

    message Update {
        repeated Slot sells = 1;
        repeated Slot buys = 2;
        double latest_price = 3;
        MarketPair market_pair = 4;
    }

    double latestPrice = 1;
    repeated Item sells = 2;
    repeated Item buys = 3;
}

message TokenMetadata {
    enum Type {
        TOKEN_TYPE_ERC20       = 0;
        TOKEN_TYPE_ERC1400     = 1;
    }

    enum Status {
        VALID    = 0; // This token is NOT displyed in walelt
        INVALID     = 1;  // This token is displayed in wallet.
    }

    Type     type                   = 1;
    Status   status                 = 2;
    string   symbol                 = 3;
    string   name                   = 4;
    string   address                = 5;
    string   unit                   = 6;
    int32    decimals               = 7;
    string   website_url            = 8;
    int32    precision              = 9;
    double   burn_rate_for_market   = 10;
    double   burn_rate_for_p2p      = 11;
    double   usd_price              = 12;
    int64    updated_at             = 13;
}

message MarketMetadata {
    enum Status {
        TERMINATED                  = 0;
        ACTIVE                      = 1;
        READONLY                    = 2;
    }

    Status status                               = 1;
    string quote_token_symbol                   = 2;
    string base_token_symbol                    = 3;
    int32  max_numbers_of_orders                = 4;
    int32  price_decimals                       = 5;
    int32  orderbook_agg_levels                 = 6;
    int32  precision_for_amount                 = 7;
    int32  precision_for_total                  = 8;
    bool   browsable_in_wallet                  = 9;
    int64  updated_at                           = 10;

    io.lightcone.core.MarketPair market_pair    = 20; // computed
    string          market_hash                 = 21; // computed
}

enum TokenStandard {
    ERC20           = 0;
    ERC1400         = 1;
}

enum SigningAlgorithm {
    ALGO_ETHEREUM   = 0;
    ALGO_EIP712     = 1;
    ALGO_NONE       = 255;
}

// use bytes to represent big-numbers and string for addresses
message RawOrder  {
    message Params {
        string dual_auth_addr                      = 1;
        string broker                              = 2;
        string order_interceptor                   = 3;
        string wallet                              = 4;
        int32  valid_until                         = 5; // in seconds
        string sig                                 = 6;
        string dual_auth_sig                       = 7;
        bool   all_or_none                         = 8;
        string dual_auth_private_key               = 12;
    }

    message FeeParams {
        string token_fee                    = 1;
        Amount amount_fee                   = 2;
        int32  waive_fee_percentage         = 3;
        int32  token_s_fee_percentage       = 4;
        int32  token_b_fee_percentage       = 5;
        string token_recipient              = 6;
        int32  wallet_split_percentage      = 7;
    }

    message ERC1400Params {
        TokenStandard token_standard_s      = 1;
        TokenStandard token_standard_b      = 2;
        TokenStandard token_standard_fee    = 3;

        string    tranche_s                 = 4;
        string    tranche_b                 = 5;
        string    transfer_data_s           = 6;
    }

    // // The following fieds are not part of Loopring's order definition but
    // // will be provided as metadata
    message State {
        int64 created_at                    = 101;
        int64 updated_at                    = 102;
        int64 matched_at                    = 103;
        int64 updated_at_block              = 104;
        io.lightcone.core.OrderStatus status= 105;

        Amount actual_amount_s              = 200;
        Amount actual_amount_b              = 201;
        Amount actual_amount_fee            = 202;
        Amount outstanding_amount_s         = 203;
        Amount outstanding_amount_b         = 204;
        Amount outstanding_amount_fee       = 205;
    }

    // string  id          = 1; // order hash
    string hash                             = 2;
    int32  version                          = 3;
    string owner                            = 4;
    string token_s                          = 5;
    string token_b                          = 6;
    Amount amount_s                         = 7;
    Amount amount_b                         = 8;
    int32  valid_since                      = 9; // in seconds
    Params          params                  = 10;
    FeeParams       fee_params              = 11;
    ERC1400Params   erc1400_params          = 12;
    State state                             = 13;
    int64  sequence_id                      = 14;
    int64  market_id                        = 15;
    int64  account_entity_id                = 16;
    int64  market_entity_id                 = 17;
}

message Amount {
    bytes value     = 1;
    int64 block_num = 2; // At which block this value is obtained. In many cases this field is not used.
}

message MarketStats {
    int32  num_buys             = 1;
    int32  num_sells            = 2;
    int32  num_orders           = 3;
    double best_buy_price       = 5;
    double best_sell_price      = 6;
    double latest_price         = 7;
    bool   is_last_taker_sell   = 8;
}


message ChainReorganizationImpact {

    message AccountInfo {
        string address          = 1;
        repeated string tokens  = 2;
    }

   repeated string order_ids    = 1;
   repeated AccountInfo accounts  = 2;
}



