/*
 * Copyright 2018 Loopring Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
package org.loopring.lightcone.proto.core;

enum XOrderStatus {
    STATUS_NEW = 0;
    STATUS_PENDING = 1;
    STATUS_EXPIRED = 2;
    STATUS_DUST_ORDER = 3;
    STATUS_PARTIALLY_FILLED = 4;
    STATUS_COMPLETELY_FILLED = 5;
    STATUS_CANCELLED_BY_USER = 6;

    STATUS_CANCELLED_LOW_BALANCE = 100;
    STATUS_CANCELLED_LOW_FEE_BALANCE = 101;
    STATUS_CANCELLED_TOO_MANY_ORDERS = 102;
    STATUS_CANCELLED_TOO_MANY_FAILED_SETTLEMENTS = 103;

    // TODO(dongw): the following should be error code
    STATUS_CANCELLED_DUPLICIATE = 200;
    STATUS_INVALID_DATA = 201;
    STATUS_UNSUPPORTED_MARKET = 202;
}

enum XMatchingFailure {
    MATCHING_ERR_NONE = 0;
    MATCHING_ERR_ORDERS_NOT_TRADABLE = 1;
    MATCHING_ERR_INCOME_TOO_SMALL = 2;
    MATCHING_ERR_MAKER_COMPLETELY_FILLED = 3;
    MATCHING_ERR_TAKER_COMPLETELY_FILLED = 4;
    MATCHING_ERR_INVALID_MAKER_ORDER = 5;
    MATCHING_ERR_INVALID_TAKER_ORDER = 6;
}

enum XOrderValidationError {
    ORDER_VALIDATION_ERR_NONE = 0;
    ORDER_VALIDATION_ERR_INVALID_OWNER = 1;
    ORDER_VALIDATION_ERR_INVALID_TOKENS = 2;
    ORDER_VALIDATION_ERR_INVALID_TOKENB = 3;
    ORDER_VALIDATION_ERR_INVALID_TOKEN_AMOUNT = 4;
    ORDER_VALIDATION_ERR_INVALID_WAIVE_PERCENTAGE = 5;
    ORDER_VALIDATION_ERR_INVALID_FEE_PERCENTAGE = 6;
    ORDER_VALIDATION_ERR_INVALID_WALLET_SPLIT_PERCENTAGE = 7;
    ORDER_VALIDATION_ERR_INVALID_MISSING_DUALAUTH_SIG = 8;
    ORDER_VALIDATION_ERR_UNSUPPORTED_VERSION = 9;
}

enum XTokenStandard {
    ERC20   = 0;
    ERC1400 = 1;
}

enum XSigningAlgorithm {
    ALGO_NONE       = 0;
    ALGO_ETHEREUM   = 1;
    ALGO_EIP712     = 2;
}

enum XDeserializationError {
    DES_ERR_NONE    = 0;
}

// use bytes to represent big-numbers and string for addresses
message XRawOrder {
    message Params {
        string dual_auth_addr          = 1;
        string broker                  = 2;
        string order_interceptor       = 3;
        string wallet                  = 4;
        int32  valid_until             = 5; // in seconds
        string sig                     = 6;
        string dual_auth_sig           = 7;
        bool   all_or_none             = 8;
        XTokenStandard token_standard_s   = 9;
        XTokenStandard token_standard_b   = 10;
        XTokenStandard token_standard_fee = 11;
    }

    message FeeParams {
        string fee_token               = 1;
        bytes  fee_amount              = 2;
        int32  waive_fee_percentage    = 3;
        int32  token_s_fee_percentage  = 4;
        int32  token_b_fee_percentage  = 5;
        string token_recipient         = 6;
        int32  wallet_split_percentage = 7;
    }

    message ERC1400Params {
        string    tranche_s         = 53;
        string    tranche_b         = 54;
        string    transfer_data_s   = 55;
    }

    // // The following fieds are not part of Loopring's order definition but
    // // will be provided as metadata
    message State {
        int64 created_at            = 101;
        int64 updated_at            = 102;
        int64 matched_at            = 103;
        int64 updated_at_block      = 104;
        XOrderStatus status         = 105;

        bytes actual_amount_s       = 200;
        bytes actual_amount_b       = 201;
        bytes actual_amount_fee     = 202;
        bytes outstanding_amount_s    = 203;
        bytes outstanding_amount_b    = 204;
        bytes outstanding_amount_fee  = 205;
    }

    // string  id          = 1; // order hash
    string hash         = 2;
    int32  version      = 3;
    string owner        = 4;
    string token_s      = 5;
    string token_b      = 6;
    bytes  amount_s     = 7;
    bytes  amount_b     = 8;
    int32  valid_since  = 9; // in seconds
    Params params                   = 10;
    FeeParams fee_params            = 11;
    ERC1400Params erc1400_params    = 12;
    State state                     = 13;
}

message XRingBatch {
    message XRing {
        repeated int32 order_indexes = 1;
    }

    string fee_recipient            = 1;
    string miner                    = 2;
    string sig                      = 3;
    repeated XRing rings            = 4;
    repeated XRawOrder orders       = 5;
    XSigningAlgorithm sign_algorithm = 6;
    string hash                     = 7;
    string transaction_origin       = 8;
}

message XRingBatchContext {
    string fee_recipient            = 1;
    string miner                    = 2;
    string transaction_origin       = 3;
    string miner_private_key        = 4;
}

message XTransaction {
    enum XTransactionType {
        TRANSFER           = 0;
        TRADE_BUY          = 1;
        TRADE_SELL         = 2;
        ETH_TO_WETH        = 3;
        WETH_TO_ETH        = 4;
        APPROVE            = 5;
        CANCEL_ORDER       = 6;
        SET_CUTOFF         = 7;
        SET_MARKET_CUTOFF  = 8;
    }

    string from                 = 1;
    string to                   = 2;
    XTransactionType tx_type    = 3;
    bytes  amount               = 4;
    string token                = 5;
    int64  nonce                = 6;
    string block_hash           = 7;
    int64  block_height         = 8;
    string tx_hash              = 9;
    int64  block_timestamp      = 10;
    bytes  gas_used             = 11;
    bytes  gas_limit            = 12;
    bytes  gas_price            = 13;
    string sender               = 14; // tx发起方，标识gas消耗地址
    bool   status               = 15; // tx执行成功还是失败
    int64  created_at           = 16;
    int64  updated_at           = 17;
    bool   is_valid             = 18;
}

message XTrade {
    message Fees {
        string token_fee               = 1;
        bytes  amount_fee              = 2;
        string token_amount_s          = 3;
        bytes  fee_amount_s            = 4;
        string token_amount_b          = 5;
        bytes  fee_amount_b            = 6;
        string fee_recipient           = 7;
    }
    int64  id                = 1;
    string delegate_address  = 2;
    string owner             = 3;
    string order_hash        = 4;
    string ring_hash         = 5;
    int32  ring_index        = 6;
    string tx_hash           = 7;
    bytes  amount_s          = 9;
    bytes  amount_b          = 10;
    string token_s           = 11;
    string token_b           = 12;
    bytes  split             = 13; //tokenS
    Fees   fees              = 14;
    int64  created_at        = 15;
    int64  updated_at        = 16;
    int64  block_height      = 17;
    bool  is_valid           = 18;
}