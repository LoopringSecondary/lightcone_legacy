/*
 * Copyright 2018 Loopring Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
package org.loopring.lightcone.proto;

enum XOrderStatus {
    STATUS_NEW = 0;
    STATUS_PENDING = 1;
    STATUS_EXPIRED = 2;
    STATUS_DUST_ORDER = 3;
    STATUS_PARTIALLY_FILLED = 4;
    STATUS_COMPLETELY_FILLED = 5;
    STATUS_CANCELLED_BY_USER = 6;

    STATUS_CANCELLED_LOW_BALANCE = 100;
    STATUS_CANCELLED_LOW_FEE_BALANCE = 101;
    STATUS_CANCELLED_TOO_MANY_ORDERS = 102;
    STATUS_CANCELLED_TOO_MANY_FAILED_SETTLEMENTS = 103;

    // TODO(dongw): the following should be error code
    STATUS_CANCELLED_DUPLICIATE = 200;
    STATUS_INVALID_DATA = 201;
    STATUS_UNSUPPORTED_MARKET = 202;
}

enum XErrorCode{
    // 0 NONE ERROR
    ERR_NONE = 0;
    ERR_INTERNAL_UNKNOWN = 1;
    ERR_INVALID_ARGUMENT = 2;

    //1001 -- 2000 Matching Error
    ERR_MATCHING_ORDERS_NOT_TRADABLE            = 1001;
    ERR_MATCHING_INCOME_TOO_SMALL               = 1002;
    ERR_MATCHING_MAKER_COMPLETELY_FILLED        = 1003;
    ERR_MATCHING_TAKER_COMPLETELY_FILLED        = 1004;
    ERR_MATCHING_INVALID_MAKER_ORDER            = 1005;
    ERR_MATCHING_INVALID_TAKER_ORDER            = 1006;
    ERR_MATCHING_TOKEN_METADATA_UNAVAILABLE     = 1007;
    ERR_MATCHING_INVALID_INTERNAL_STATE         = 1008;

    // 2001 -- 3000 Order Error
    ERR_ORDER_VALIDATION_INVALID_OWNER                      = 2001;
    ERR_ORDER_VALIDATION_INVALID_TOKENS                     = 2002;
    ERR_ORDER_VALIDATION_INVALID_TOKENB                     = 2003;
    ERR_ORDER_VALIDATION_INVALID_TOKEN_AMOUNT               = 2004;
    ERR_ORDER_VALIDATION_INVALID_WAIVE_PERCENTAGE           = 2005;
    ERR_ORDER_VALIDATION_INVALID_FEE_PERCENTAGE             = 2006;
    ERR_ORDER_VALIDATION_INVALID_WALLET_SPLIT_PERCENTAGE    = 2007;
    ERR_ORDER_VALIDATION_INVALID_MISSING_DUALAUTH_SIG       = 2008;
    ERR_ORDER_VALIDATION_UNSUPPORTED_VERSION                = 2009;

    //3001 -- 4000 core actors error
    ERR_ORDER_ALREADY_EXIST             = 3001;
    ERR_ORDER_NOT_EXIST                 = 3002;
    ERR_ORDER_INVALID_AMOUNT_S          = 3003;
    ERR_LOW_BALANCE                     = 3004;
    ERR_LOW_FEE_BALANCE                 = 3005;
    ERR_TOKEN_NOT_EXIST                 = 3006;
    ERR_TOO_MANY_ORDERS                 = 3007;
    ERR_TOO_MANY_FAILED_MATCHES         = 3008;
    ERR_INVALID_ORDER_DATA              = 3009;
    ERR_INVALID_MARKET                  = 3010;
    ERR_UNEXPECTED_ACTOR_MSG            = 3011;
    ERR_UNSUPPORTED_MESSAGE             = 3012;
    ERR_FAILED_HANDLE_MSG               = 3013;
    ERR_REJECTED_DURING_RECOVER         = 3014;

    //4001 -- 5000 persistence Error
    ERR_PERSISTENCE_INVALID_DATA        = 4001;
    ERR_PERSISTENCE_DUPLICATE_INSERT    = 4002;
    ERR_PERSISTENCE_UPDATE_FAILED       = 4003;
    ERR_PERSISTENCE_INTERNAL            = 4004;

    //5001 -- 6000 ethereum Error
    ERR_ETHEREUM_ILLEGAL_ADDRESS        = 5001;

    // 5001 and beyound for other

}

message XError{
    XErrorCode code = 1;
    string message = 2;
}

enum XTokenStandard {
    ERC20   = 0;
    ERC1400 = 1;
}

enum XSigningAlgorithm {
    ALGO_ETHEREUM   = 0;
    ALGO_EIP712     = 1;
    
    ALGO_NONE       = 255;
}


// use bytes to represent big-numbers and string for addresses
message XRawOrder {
    message Params {
        string dual_auth_addr          = 1;
        string broker                  = 2;
        string order_interceptor       = 3;
        string wallet                  = 4;
        int32  valid_until             = 5; // in seconds
        string sig                     = 6;
        string dual_auth_sig           = 7;
        bool   all_or_none             = 8;
        XTokenStandard token_standard_s   = 9;
        XTokenStandard token_standard_b   = 10;
        XTokenStandard token_standard_fee = 11;
        string dual_auth_addr_private_key = 12;
    }

    message FeeParams {
        string token_fee               = 1;
        bytes  amount_fee              = 2;
        int32  waive_fee_percentage    = 3;
        int32  token_s_fee_percentage  = 4;
        int32  token_b_fee_percentage  = 5;
        string token_recipient         = 6;
        int32  wallet_split_percentage = 7;
    }

    message ERC1400Params {
        string    tranche_s         = 53;
        string    tranche_b         = 54;
        string    transfer_data_s   = 55;
    }

    // // The following fieds are not part of Loopring's order definition but
    // // will be provided as metadata
    message State {
        int64 created_at            = 101;
        int64 updated_at            = 102;
        int64 matched_at            = 103;
        int64 updated_at_block      = 104;
        XOrderStatus status         = 105;

        bytes actual_amount_s       = 200;
        bytes actual_amount_b       = 201;
        bytes actual_amount_fee     = 202;
        bytes outstanding_amount_s    = 203;
        bytes outstanding_amount_b    = 204;
        bytes outstanding_amount_fee  = 205;
    }

    // string  id          = 1; // order hash
    string hash         = 2;
    int32  version      = 3;
    string owner        = 4;
    string token_s      = 5;
    string token_b      = 6;
    bytes  amount_s     = 7;
    bytes  amount_b     = 8;
    int32  valid_since  = 9; // in seconds
    Params params                   = 10;
    FeeParams fee_params            = 11;
    ERC1400Params erc1400_params    = 12;
    State state            = 13;
    int64 sequence_id      = 14;
    string market_hash     = 15;
}

message XRingBatch {
    message XRing {
        repeated int32 order_indexes = 1;
    }

    string fee_recipient            = 1;
    string miner                    = 2;
    string sig                      = 3;
    repeated XRing rings            = 4;
    repeated XRawOrder orders       = 5;
    XSigningAlgorithm sign_algorithm = 6;
    string hash                     = 7;
    string transaction_origin       = 8;
}

message XRingBatchContext {
    string fee_recipient            = 1;
    string miner                    = 2;
    string transaction_origin       = 3;
    string miner_private_key        = 4;
    string lrc_address              = 5;
}

message XTrade {
    message Fees {
        string token_fee               = 1;
        bytes  amount_fee              = 2;
        string token_amount_s          = 3;
        bytes  fee_amount_s            = 4;
        string token_amount_b          = 5;
        bytes  fee_amount_b            = 6;
        string fee_recipient           = 7;
    }

    string owner             = 1;
    string delegate_address  = 2;
    string order_hash        = 3;
    string ring_hash         = 4;
    int64  ring_index        = 5;
    string tx_hash           = 6;
    bytes  amount_s          = 7;
    bytes  amount_b          = 8;
    string token_s           = 9;
    string token_b           = 10;
    string market_hash       = 11;
    bytes  split             = 12; //tokenS
    Fees   fees              = 13;
    int64  created_at        = 14;
    int64  updated_at        = 15;
    int64  block_height      = 16;
    int64  block_timestamp   = 17;
    int64 sequence_id        = 18;
}

message XOrdersCutoffEvent {
    string tx_hash         = 1;
    string broker          = 3;
    string owner           = 4;
    string trading_pair    = 5;
    int64  cutoff          = 6; // in seconds.
    int64  created_at      = 7;
    int64  updated_at      = 8;
    int64  block_height    = 9;
}

message XOrdersCancelledEvent {
    string tx_hash         = 1;
    string broker_or_owner = 2;
    string order_hash      = 3;
    int64  created_at      = 4;
    int64  updated_at      = 5;
    int64  block_height    = 6;
}