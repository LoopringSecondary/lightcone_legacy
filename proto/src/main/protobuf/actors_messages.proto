/*
 * Copyright 2018 Loopring Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
package org.loopring.lightcone.proto;

import "actors_data.proto";
import "core.proto";
import "ethereum.proto";

/////////////////////////////////////////////////////////////////////
// ONE WAY MESSAGES
/////////////////////////////////////////////////////////////////////

message Notify {
    string message = 1;
    string param = 2;
}

message SubmitSimpleOrder {
    string owner = 1;
    Order order = 2;
}

message TriggerRematch {
    bool sell_order_as_taker = 1;
    int32 offset = 2;
}

message SettleRings {
    repeated OrderRing rings = 1;
    bytes gas_limit = 2;
    bytes gas_price = 3;
}

message AddressBalanceUpdated {
    string address = 1;
    string token = 2;
    bytes balance = 3;
}

message AddressAllowanceUpdated {
    string address = 1;
    string token = 2;
    bytes balance = 3;
}

message GasPriceUpdated {
    int64 gas_price = 1;
}

message OrderStatusMonitor {
    string monitoring_type = 1;
    int64 process_time = 2;

    enum MonitoringType {
        MONITORING_ACTIVATE = 0;
        MONITORING_EXPIRE = 1;
    }
}

/////////////////////////////////////////////////////////////////////
// TWO WAY REQUEST-RESPONSES (DB RELATD NOT INCLUDED)
/////////////////////////////////////////////////////////////////////

message SubmitOrder {
    message Req {
        RawOrder raw_order = 1;
    }

    message Res {
        Order order = 1;
    }
}

message CancelOrder {
    message Req {
        string id = 1;
        string owner = 2;
        OrderStatus status = 3; //取消的类型
        MarketId market_id = 4;
    }

    message Res {
        string id = 1;
        OrderStatus status = 2; //取消的类型
    }
}

message GetOrderbook {
    message Req {
        int32 level = 2;
        int32 size = 1;
        MarketId market_id = 3;
    }

    message Res {
        Orderbook orderbook = 1;
    }
}

message GetOrderFilledAmount {
    message Req {
        string order_id = 1;
    }

    message Res {
        string order_id = 1;
        bytes filled_amount_s = 2;
    }
}

message GetBalanceAndAllowances {
    message Req {
        string address = 1;
        repeated string tokens = 2;
    }

    message Res {
        string address = 1;
        map<string, BalanceAndAllowance> balance_and_allowance_map = 2;
        Error error = 3;
    }
}

message GetBalance {
    message Req{
        string address = 1;
        repeated string tokens = 2;
    }
    message Res {
        string address = 1;
        map<string, bytes> balance_map = 2;
        Error error = 3;
    }
}

message GetAllowance {
    message Req{
        string address = 1;
        repeated string tokens = 2;
    }
    message Res {
        string address = 1;
        map<string, bytes> allowance_map = 2;
        Error error = 3;
    }
}

message UpdateFilledAmount {
    message Req {
        string id = 1;
        bytes order_filled_amount_s = 2;
    }

    message Res {
        ErrorCode error = 1;
    }
}

message GetFilledAmount {
    message Req {
        repeated string order_ids = 1;
    }

    message Res {
        map<string, bytes> filled_amount_s_map = 1;
    }
}

message UpdateBalanceAndAllowance {
    message Req {
        string address = 1;
        string token = 2;
        BalanceAndAllowance balance_and_allowance = 3;
    }

    message Res {
        ErrorCode error = 1;
        BalanceAndAllowance balance_and_allowance = 2;
    }
}

message SendRawTx {
    message Req {
        bytes data = 1;
    }

    message Res {
        SendStatus status = 1;
        enum SendStatus {
            SEND_STATUS_UNKNOW = 0;
            SEND_STATUS_SUCCESS = 1;
        }
    }
}

message GetGasPrice {
    message Req {}

    message Res {
        bytes gas_price = 1;
    }
}

message SetGasPrice {
    message Req {
        bytes gas_price = 1;
    }

    message Res {
        bytes gas_price = 1;
    }
}

message SaveBlock {
    message Req {
        BlockData block_data = 1;
    }

    message Res {
        Error error = 1;
    }
}

message GetNodeBlockHeight {
    message Req{}

    message Res{
        repeated NodeBlockHeight nodes = 1;
    }
}