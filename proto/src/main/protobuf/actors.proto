/*
 * Copyright 2018 Loopring Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
package org.loopring.lightcone.proto.actors;

import "core.proto";

message XOrderState {
    bytes amount_s = 1;
    bytes amount_b = 2;
    bytes amount_fee = 3;
}

message XOrder {
    string id = 1;
    string token_s = 2;
    string token_b = 3;
    string token_fee = 4;
    bytes amount_s = 5;
    bytes amount_b = 6;
    bytes amount_fee = 7;
    int64 created_at = 8;
    core.XOrderStatus status = 9;
    double wallet_split_percentage = 10;
    XOrderState outstanding = 11;
    XOrderState reserved = 12;
    XOrderState actual = 13;
    XOrderState matchable = 14;
}

message XExpectedFill {
    XOrder order = 1;
    XOrderState pending = 2;
    bytes amount_margin = 3;
}

message XRing {
    XExpectedFill maker = 1;
    XExpectedFill taker = 2;
}

///////////////////
enum XErrorCode {
    ERR_OK = 0;
    ERR_ORDER_ALREADY_EXIST = 1;
    ERR_ORDER_NOT_EXIST = 2;
    ERR_ORDER_INVALID_AMOUNT_S = 3;
    ERR_LOW_BALANCE = 4;
    ERR_LOW_FEE_BALANCE = 5;
    ERR_TOKEN_NOT_EXIST = 6;
    ERR_TOO_MANY_ORDERS = 7;
    ERR_TOO_MANY_FAILED_MATCHES = 8;
    ERR_INVALID_ORDER_DATA = 9;
    ERR_INVALID_MARKET = 10;
    ERR_UNKNOWN = 1000;
}

message XBalanceAndAllowance {
    bytes balance = 2;
    bytes allowance = 3;
}

message XGetBalanceAndAllowancesReq {
    string address = 1;
    repeated string tokens = 2;
}

message XGetBalanceAndAllowancesRes {
    string address = 1;
    map<string, XBalanceAndAllowance> balance_and_allowance_map = 2;
}

message XSubmitOrderReq {
    XOrder order = 1;
}

message XSubmitOrderRes {
    XErrorCode error = 1;
    XOrder order = 2;
}

message XAddressBalanceUpdated {
    string address = 1;
    string token = 2;
    bytes balance = 3;
}

message XAddressAllowanceUpdated {
    string address = 1;
    string token = 2;
    bytes balance = 3;
}


// 由ethereum发送给orderManagingActor
// 以太坊事件顺序根据blockID，tx&eventId来确定,由route汇聚到不同用户地址,然后按顺序逐个发送给orderManagingActor
// 注意: cancelOrderReq 可能包含用户软取消,在orderManagerState软取消后用户链上数据继续变更不影响最终结果
message XCancelOrderReq {
    string id = 1;
    bool hard_cancel = 2; // 默认软取消
}

message XCancelOrderRes {
    string id = 1;
    bool hard_cancel = 2; // 默认软取消
    XErrorCode error = 3;
}

message UpdateFilledAmountReq {
    string id = 1;
    bytes order_filled_amount_s = 2;
}

message UpdateFilledAmountRes {
    XErrorCode error = 1;
}

message GetFilledAmountReq {
    repeated string order_ids = 1;
}

message GetFilledAmountRes {
    map<string, bytes> filled_amount_s_map = 1;
}

message XUpdateBalanceAndAllowanceReq {
    string address = 1;
    string token = 2;
    XBalanceAndAllowance balance_and_allowance = 3;
}

message XUpdateBalanceAndAllowanceRes {
    XErrorCode error = 1;
    XBalanceAndAllowance balance_and_allowance = 2;
}

message XUpdatedGasPrice {
    int64 gas_price = 1;
}

message XSendRawTxReq {
    bytes data = 1;
}

message XSendRawTxRes {
    SendStatus status = 1;
    enum SendStatus {
        SEND_STATUS_UNKNOW = 0;
        SEND_STATUS_SUCCESS = 1;
    }
}

enum XExecutedStatus {
    EXECUTED_STATUS_UNKNOW = 0;
    EXECUTED_STATUS_FAILED = 1;
    EXECUTED_STATUS_SUCCESS = 2;
}

message XRingExecutedRes {
    XRing ring = 1;
    string tx_hash = 2;
    XExecutedStatus status = 3;
    bytes used_gas = 4;
    int64 block_number = 5;
}

message XSendRawTransactionRes {
    int32 id = 1;
    string jsonrpc = 2;
    string result = 3;
}

message XSubmitRingReq {
  repeated XRing rings = 1;
  string gas_limit = 2;
  string gas_price = 3;
}

message XGetGasPriceReq {}

message XGetGasPriceRes {
  string gas_price = 1;
}

message XUpdatedTokenBurnRate {
    string token = 1;
    double burnRate = 2;
}

message XQueryBalance {
}