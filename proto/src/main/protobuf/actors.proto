/*
 * Copyright 2018 Loopring Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
package org.loopring.lightcone.proto.actors;

import "core.proto";
import "auxiliary.proto";

import "google/protobuf/wrappers.proto";

message XOrderState {
    bytes amount_s = 1;
    bytes amount_b = 2;
    bytes amount_fee = 3;
}

message XRawOrder {
    string owner = 1;
    string token_s = 2;
    string token_b = 3;
    bytes amount_s = 4;
    bytes amount_b = 5;
    int64 valid_since = 6;
    bool all_or_none = 7;
    string fee_token = 8;
    bytes fee_amount = 9;
    string sig = 10;
    string dual_auth_sig = 11;
    string hash = 12;
    int64 valid_until = 13;
    string wallet = 14;
    string dual_auth_address = 15;
    string broker = 16;
    string order_interceptor = 17;
    string version = 18;
    int32 wallet_split_percentage = 19;
    int32 token_s_fee_percentage = 20;
    int32 token_b_fee_percentage = 21;
    int32 waive_fee_percentage = 22;
    int32 fee_percentage = 23;
    bytes token_spendable_s = 24;
    bytes token_spendable_fee = 25;
    bytes broker_spendable_s = 26;
    bytes broker_spendable_fee = 27;
    string token_recipient = 28;
    string dual_private_key = 29;
}

message XOrder {
    string id = 1;
    string token_s = 2;
    string token_b = 3;
    string token_fee = 4;
    bytes amount_s = 5;
    bytes amount_b = 6;
    bytes amount_fee = 7;
    int64 created_at = 8;
    int64 updated_at = 9;
    core.XOrderStatus status = 10;
    double wallet_split_percentage = 11;
    XOrderState outstanding = 12;
    XOrderState reserved = 13;
    XOrderState actual = 14;
    XOrderState matchable = 15;
}

message XExpectedFill {
    XOrder order = 1;
    XOrderState pending = 2;
    bytes amount_margin = 3;
}

message XOrderRing {
    XExpectedFill maker = 1;
    XExpectedFill taker = 2;
}

///////////////////
enum XErrorCode {
    ERR_OK = 0;
    ERR_ORDER_ALREADY_EXIST = 1;
    ERR_ORDER_NOT_EXIST = 2;
    ERR_ORDER_INVALID_AMOUNT_S = 3;
    ERR_LOW_BALANCE = 4;
    ERR_LOW_FEE_BALANCE = 5;
    ERR_TOKEN_NOT_EXIST = 6;
    ERR_TOO_MANY_ORDERS = 7;
    ERR_TOO_MANY_FAILED_MATCHES = 8;
    ERR_INVALID_ORDER_DATA = 9;
    ERR_INVALID_MARKET = 10;
    ERR_UNKNOWN = 1000;
}

message XGetOrderFilledAmountReq {
    string order_id = 1;
}

message XGetOrderFilledAmountRes {
    string order_id = 1;
    bytes filled_amount_s = 2;
}

message XBalanceAndAllowance {
    bytes balance = 1;
    bytes allowance = 2;
    bytes availableBalance = 3;
    bytes availableAllowance = 4;
}

message XGetBalanceAndAllowancesReq {
    string address = 1;
    repeated string tokens = 2;
}

message XGetBalanceAndAllowancesRes {
    string address = 1;
    map<string, XBalanceAndAllowance> balance_and_allowance_map = 2;
}

message XSubmitRawOrderReq {
    XRawOrder order = 1;
}

message XSubmitOrderReq {
    XOrder order = 1;
}

message XSubmitOrderRes {
    XErrorCode error = 1;
    XOrder order = 2;
}

message XAddressBalanceUpdated {
    string address = 1;
    string token = 2;
    bytes balance = 3;
}

message XAddressAllowanceUpdated {
    string address = 1;
    string token = 2;
    bytes balance = 3;
}

message XUpdateOrderStateAndStatusReq {
    XOrderState actuals = 1;
    core.XOrderStatus status = 2;
}

message XUpdateOrderStateAndStatusRes {
    bool result =1;
}

// 由ethereum发送给orderManagingActor
// 以太坊事件顺序根据blockID，tx&eventId来确定,由route汇聚到不同用户地址,然后按顺序逐个发送给orderManagingActor
// 注意: cancelOrderReq 可能包含用户软取消,在orderManagerState软取消后用户链上数据继续变更不影响最终结果
message XCancelOrderReq {
    string id = 1;
    bool hard_cancel = 2; // 默认软取消
}

message XCancelOrderRes {
    string id = 1;
    bool hard_cancel = 2; // 默认软取消
    XErrorCode error = 3;
}

message UpdateFilledAmountReq {
    string id = 1;
    bytes order_filled_amount_s = 2;
}

message UpdateFilledAmountRes {
    XErrorCode error = 1;
}

message GetFilledAmountReq {
    repeated string order_ids = 1;
}

message GetFilledAmountRes {
    map<string, bytes> filled_amount_s_map = 1;
}

message XUpdateBalanceAndAllowanceReq {
    string address = 1;
    string token = 2;
    XBalanceAndAllowance balance_and_allowance = 3;
}

message XUpdateBalanceAndAllowanceRes {
    XErrorCode error = 1;
    XBalanceAndAllowance balance_and_allowance = 2;
}

message XGasPriceUpdated {
    int64 gas_price = 1;
}

message XTriggerRematchReq {
    bool sell_order_as_taker = 1;
    int32 offset = 2;
}

message XSendRawTxReq {
    bytes data = 1;
}

message XSendRawTxRes {
    SendStatus status = 1;
    enum SendStatus {
        SEND_STATUS_UNKNOW = 0;
        SEND_STATUS_SUCCESS = 1;
    }
}

message XRecoverOrdersReq {
    string address = 1;
    int64 updated_since = 2;
    int32 num = 3;
}

message XRecoverOrdersRes {
    repeated XRawOrder orders = 1;
}

enum XExecutedStatus {
    EXECUTED_STATUS_UNKNOW = 0;
    EXECUTED_STATUS_FAILED = 1;
    EXECUTED_STATUS_SUCCESS = 2;
}

message XRingExecutedRes {
    XOrderRing ring = 1;
    string tx_hash = 2;
    XExecutedStatus status = 3;
    bytes used_gas = 4;
    int64 block_number = 5;
}

message XSendRawTransaction {
    bytes data = 1;
}

message XSendRawTransactionRes {
    int32 id = 1;
    string jsonrpc = 2;
    string result = 3;
}

message XSettleRingsReq {
    repeated XOrderRing rings = 1;
    bytes gas_limit = 2;
    bytes gas_price = 3;
}

message XGetGasPriceReq {
}

message XGetGasPriceRes {
    bytes gas_price = 1;
}

message XSetGasPriceReq {
    bytes gas_price = 1;
}

message XSetGasPriceRes {
    bytes gas_price = 1;
}


message XUpdatedTokenBurnRate {
    string token = 1;
    double burnRate = 2;
}

message XPersistOrderHistoryReq {
    string order_id = 1;
    bytes filled_amount_s = 2;
}

message XPersistOrderHistoryRes {
}

// for XRawOrder db manager
message XRawOrderSaveOrUpdateReq {
    XRawOrder xraw_order = 1;
    int32 updatedBlock = 2;
    string dealt_amount_s = 3;
    string dealt_amount_b = 4;
    string cancelled_amount_s = 5;
    string cancelled_amount_b = 6;
    core.XOrderStatus status = 7;
    int32 broadcast_time = 8;
    int32 pow_nonce = 9;
    string market = 10;
    string side = 11;
    int32 price = 12;
    string order_type = 13;
}

message XRawOrderQryByHashReq {
    string order_hash = 1;
}

message XRawOrderQryByPagingReq {

    //OrderQuery
    message XRawOrderQuery {
        repeated core.XOrderStatus statuses = 1;
        string owner = 2;
        string market = 3;
        repeated string hashes = 4;
        auxiliary.XMarketSide side = 5;
        auxiliary.XOrderType order_type = 6;
    }

    message XRawOrderPaging {
        int32 offset = 1;
        int32 limit = 2;
    }

    XRawOrderQuery query = 1;

    XRawOrderPaging paging = 2;

}

message XRawOrderSoftCancelReq {
    string hash = 1;
    int64 cutoffTime = 2;
    string market = 3;
    auxiliary.XSoftCancelType cancelType = 4;
    string owner = 5;
}
// for XRawOrder db manager ended