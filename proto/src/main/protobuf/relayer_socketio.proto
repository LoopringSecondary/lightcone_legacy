/*
 * Copyright 2018 Loopring Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
package io.lightcone.relayer.data;

import "core.proto";
import "relayer_common.proto";
import "persistence.proto";
import "ethereum_persistence.proto";

message AccountUpdate {
    string address                      = 1;
    io.lightcone.relayer.data.AccountBalance.TokenBalance  token_balance = 2;
    int32  nonce                        = 3;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// socketio subscription

message SocketIOSubscription {
    message Ack { // we only need to return a general message
        io.lightcone.core.ErrorCode error   = 1;
        string message                      = 2;
    }

    // subscribe for message Activity defined in persistence.proto
    message ParamsForActivities {
        repeated string addresses = 1;
    }

    // subscribe for message RawOrder defined in core.proto
    message ParamsForOrders {
        repeated string addresses  = 1;
        io.lightcone.core.MarketPair market = 2;
    }

    // subscribe for message Fill defined in persistene.proto
    message ParamsForFills {
        string address = 1;
        io.lightcone.core.MarketPair market = 2;
    }

    // subscribe for message Orderbook.Update defined in core.proto
    message ParamsForOrderbook {
        int32 level = 1;
        io.lightcone.core.MarketPair market = 2;
    }


    // subscribe for message TokenMetadata defined in core.proto
    message ParamsForTokens {
    }

    // subscribe for message MarketMetadata defined in core.proto
    message ParamsForMarkets {
    }

    // subscribe for message MarketTicker defined in core.proto
    message ParamsForTickers {
        io.lightcone.core.MarketPair market = 1;
    }

    // subscribe for message InternalMarketTicker defined in core.proto
    message ParamsForInternalTickers{
        io.lightcone.core.MarketPair market = 1;
    }

    // subscribe for message Accounts
    message ParamsForAccounts {
        repeated string addresses  = 1;
        repeated string tokens = 2;
    }

    // subscribe for message News defined in persistence.proto
    message ParamsForNews {
    }

    message Notification {
        io.lightcone.ethereum.persistence.Activity  activity            = 1;
        io.lightcone.core.RawOrder                  order               = 2;
        io.lightcone.ethereum.persistence.Fill      fill                = 3;
        io.lightcone.core.Orderbook.Update          orderbook           = 4;
        io.lightcone.core.TokenMetadata             token_metadata      = 5;
        io.lightcone.core.MarketMetadata            market_metadata     = 6;
        io.lightcone.persistence.News               news                = 7;
        io.lightcone.core.MarketTicker              ticker              = 8;
        io.lightcone.core.InternalMarketTicker      internal_ticker     = 9;
        AccountUpdate                               account             = 10;

    }

    ParamsForActivities           params_for_activities           = 1;
    ParamsForOrders               params_for_orders               = 2;
    ParamsForFills                params_for_fills                = 3;
    ParamsForOrderbook            params_for_orderbook            = 4;
    ParamsForTokens               params_for_tokens               = 5;
    ParamsForMarkets              params_for_markets              = 6;
    ParamsForTickers              params_for_tickers              = 7;
    ParamsForInternalTickers      params_for_internal_tickers     = 8;
    ParamsForNews                 params_for_news                 = 9;
    ParamsForAccounts             params_for_accounts             = 10;

}
