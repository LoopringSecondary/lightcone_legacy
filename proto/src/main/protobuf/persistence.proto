/*
 * Copyright 2018 Loopring Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
package org.loopring.lightcone.proto.persistence;

import "core_data.proto";
import "core_messages.proto";
import "actors_core.proto";

enum XOrderSide {
    ORDER_SIDE_BUY = 0;
    ORDER_SIDE_SELL = 1;
}

enum XOrderType {
    ORDER_TYPE_MARKET = 0;
    ORDER_TYPE_P2P = 1;
}

enum XErrorCode {
    DB_SUCC = 0;
    DB_DUPLICATED = 1;
}

/*************  order start  ***************/
message XOrderPersistent {
    core.XRawOrder raw_order = 1;

    /* additional columns */
    int64 id = 2;
    XOrderSide side = 3;
    XOrderType order_type = 4;
    core.XMarketId market = 5;
    actors.XOrderState outstanding = 6;
    actors.XOrderState reserved = 7;
    actors.XOrderState actual = 8;
    actors.XOrderState matchable = 9;
}

message XSaveOrderPersistentReq {
    XOrderPersistent order = 1;
}

message XSaveOrderPersistentRes {
    XErrorCode code = 1;
    string order_hash = 2;
    int64 id = 3;
}

message XGetRawOrderByHashReq {
    string hash = 1;
}

message XGetRawOrderByHashRes {
    core.XRawOrder raw_order = 1;
}

message XGetOrderByHashReq {
    string hash = 1;
}

message XGetOrderByHashRes {
    actors.XOrder order = 1;
}

//TODO du(汇总一个接口，还是拆分成多个接口？)
// 如果传入参数，就作为查询条件
message XGetRawOrdersReq {
    string owner = 1;
    string order_hash = 2;
    string delegate_address = 3;
    XOrderSide side = 4;
    XOrderType order_type = 5;
    core.XMarketId market = 6;
    int32 page_index = 7;
    int32 page_size = 8;
}

message XGetRawOrdersRes {
    repeated core.XRawOrder raw_orders = 1;
}

message XUpdateOrderStateReq {
    string order_hash = 1;
    actors.XOrderState outstanding = 2;
    actors.XOrderState reserved = 3;
    actors.XOrderState actual = 4;
    actors.XOrderState matchable = 5;
    core.XOrderStatus status = 6;
}

message XUpdateOrderStateRes {
    XErrorCode code = 1;
}

message XUpdateOrderStatusReq {
    string order_hash = 1;
    core.XOrderStatus status = 2;
}

message XUpdateOrderStatusRes {
    XErrorCode code = 1;
}

/*************  order end  ***************/

/*************  fill start  ***************/

message XOrderFillPersistence {
    int64 id = 1;
    string delegate_address = 2;
    string owner = 3;
    string order_hash = 4;
    string ring_hash = 5;
    int32 ring_index = 6;
    string tx_hash = 7;
    XOrderType order_type = 8;
    bytes  amount_s = 9;
    bytes  amount_b = 10;
    string token_s = 11;
    string token_b = 12;
    bytes amount_margin = 13;
    bytes amount_fee = 14;
    string token_fee = 15;
    int64 created_at = 16;
    int64 updated_at = 17;
    int64 block_no = 18;
    bool is_valid = 19;
}

message XSaveFillPersistenceReq {
    repeated XOrderFillPersistence fills = 1;
}

message XSaveFillPersistenceRes {
    XErrorCode code = 1;
    repeated int64 ids = 2;
}

message XGetFillsReq {
    string owner = 1;
    string order_hash = 2;
    string delegate_address = 3;
    XOrderType order_type = 4;
    core.XMarketId market = 5;
    int32 page_index = 6;
    int32 page_size = 7;
}

message XGetFillsRes {
    repeated XOrderFillPersistence raw_fills = 1;
}

message XUpdateFilledInvalidReq {
    int64 block_no = 1;
}

message XUpdateFilledInvalidRes {
    XErrorCode code = 1;
}

/*************  fill end  ***************/

/*************  ring start  ***************/

message XRingPersistence {
    int64 id = 1;
    string ring_hash = 2;
    string tx_hash = 3;
    string delegate_address = 4;
    int32 trade_amount = 5;
    string miner = 6;
    int64 created_at = 7;
    int64 updated_at = 8;
    int64 block_no = 9;
    bool is_valid = 10;
}

message XSaveRingPersistenceReq {
    XRingPersistence ring = 1;
}

message XSaveRingPersistenceRes {
    XErrorCode code = 1;
    int64 id = 2;
}

message XGetRingReq {
    string ring_hash = 1;
    string tx_hash = 2;
}

message XGetRingRes {
    XRingPersistence ring = 1;
}

message XGetRingsReq {
    int32 page_index = 1;
    int32 page_size = 2;
}

message XGetRingsRes {
    repeated XRingPersistence rings = 1;
}

message XUpdateRingsInvalidReq {
    int64 block_no = 1;
}

message XUpdateRingsInvalidRes {
    XErrorCode code = 1;
}

/*************  ring start  ***************/


message Bar {
    string a = 1;
    string b = 2;
    string c = 3;
    int64 d = 4;
}