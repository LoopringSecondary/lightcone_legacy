/*
 * Copyright 2018 Loopring Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
package io.lightcone.persistence;

import "core.proto";
// import "ethereum.proto";

enum SortingType {
    ASC  = 0;
    DESC = 1;
}

message Paging {
    int64 skip = 1; // 忽略的记录
    int32 size = 2; // 拉取的记录数
}

message CursorPaging {
    int64 cursor = 1; // where seqenceId > from limit 0, take
    int32 size = 2;
}


message News {

}


message BlockData {
    string hash                 = 1;
    int64  height               = 2;
    int64  timestamp            = 3;
    int32  num_tx               = 4;
    string parent_hash          = 5;
    string sha3_uncles          = 6;
    string mined_by             = 7;
    bytes  difficulty           = 8;
    bytes  total_difficulty     = 9;
    int64  size                 = 10;
    bytes  gas_used             = 11;
    bytes  gas_limit            = 12;
    int64  avg_gas_price        = 13;
    int64  nonce                = 14;
    bytes  block_reward         = 15;
    bytes  uncle_reward         = 16;
    bytes  extra_data           = 17;
}

message AccountActivity {

    enum ActivityType {
        ETHER_TRANSFER_OUT           = 0;
        ETHER_TRANSFER_IN            = 1;
        ETHER_WRAP                   = 2;
        ETHER_UNWRAP                 = 3;
        TOKEN_TRANSFER_OUT           = 4;
        TOKEN_TRANSFER_IN            = 5;
        TOKEN_AUTH                   = 6;
        TRADE_SELL                   = 7;
        TRADE_BUY                    = 8;
        ORDER_CANCELLATION           = 9;
        ORDER_SUBMISSION             = 10;
    }

    message EtherTransfer {
        string  address                     = 1;  // 'to' or 'from'
        io.lightcone.core.Amount amount     = 2;  // can be 0
    }

    message EtherConversion {
        io.lightcone.core.Amount amount     = 1;  // can be 0
    }

    message TokenTransfer {
        string  address                     = 1;  // 'to' or 'from'
        string  token                       = 2;  // symbol (if we know)or) or address (otherwise)
        io.lightcone.core.Amount amount     = 3;
    }

    message TokenAuth {
        string  token                       = 1;  // symbol (if we know)or) or address (otherwise)
        string  target                      = 2;
        io.lightcone.core.Amount amount     = 3;
    }


    // If the txType is TRADE_BUY:
    message LoopringTrade {
        string  address                             = 1;
        string  token_base                          = 2;  // symbol (if we know)or) or address (otherwise)
        string  token_quote                         = 3;  // symbol (if we know)or) or address (otherwise)
        string  price                               = 4;  // == _amountquote / _amountbase
        io.lightcone.core.Amount base_amount        = 5;
        io.lightcone.core.Amount quote_amount       = 6;
    }

    message OrderCancellation {
        string order_id         = 1;
        int64  cutoff           = 2; // if order_id is not "", this must be not 0.
        string market_pair      = 3; // dispaly as "LRC/ETH", if missing, means all markets.
        string broker           = 4; // optional
    }

    // onchain OrderSubmission
    message OrderSubmission {
        // TODO: support this later.
    }


    // To query Tx records for a address "ABC", either owner or target will be ABC.
    // if owner == target == ABC, we treat  owner == ABC and ignore target.
    string owner                = 1; // (indexed) the related address
    int64  block                = 2; // (indexed)  0 indiciate pending
    int64  tx_hash              = 3; // (indexed) the transaction hash, multiple Tx record may
                                     // share the same tx hash, the wallet may choose to group
                                     // those records to display.
    ActivityType activity_type  = 4; //  (indexed)
    int64  timestamp            = 5; //  (indexed) may not be unique, used in sorting
    double fiat_value           = 6;

    oneof detail {
        EtherTransfer       ether_transfer          = 21;
        EtherConversion     ether_conversion        = 22;
        TokenTransfer       token_transfer          = 23;
        TokenAuth           token_auth              = 24;
        Trading             trading                 = 25;
        OrderCancellation   order_cancellatiin      = 26;
        SubmitOrder         order_submission        = 27;
    }
}