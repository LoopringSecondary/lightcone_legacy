syntax = "proto3";

option java_multiple_files = true;
package io.lightcone.relayer.data.ext;

import "core.proto";
import "persistence.proto";

// TODO(yadong)： I think we can still use proto enums in these data structures.
// RPC Submit Order
message RawOrder {
    int32       version                          = 1;
    string      owner                            = 2;
    string      token_s                          = 3;
    string      token_b                          = 4;
    string      amount_s                         = 5;
    string      amount_b                         = 6;
    string      valid_since                      = 7; // in seconds
    string      dual_auth_addr                   = 8;
    string      broker                           = 9;
    string      order_interceptor                = 10;
    string      wallet                           = 11;
    string      valid_until                      = 12; // in seconds
    string      sig                              = 13;
    string      dual_auth_sig                    = 14;
    bool        all_or_none                      = 15;
    string      dual_auth_private_key            = 16;
    string      token_fee                        = 17;
    string      amount_fee                       = 18;
    int32       token_s_fee_percentage           = 19;
    int32       token_b_fee_percentage           = 20;
    string      token_recipient                  = 21;
    int32       wallet_split_percentage          = 22;
    int32       token_standard_s                 = 23;
    int32       token_standard_b                 = 24;
    int32       token_standard_fee               = 25;
    string      tranche_s                        = 26;
    string      tranche_b                        = 27;
    string      transfer_data_s                  = 28;
}

// Usef for JSON RPC and WEB SOCKET
message OrderSnippet {
    string order_id                                 = 1;
    string owner                                    = 2;
    io.lightcone.core.MarketPair   market_pair      = 3;
    io.lightcone.core.OrderStatus  status           = 4;
    io.lightcone.relayer.data.OrderState state      = 5;
}

// Usef for JSON RPC and WEB SOCKET
message RingSnippet {
    string   ring_hash         = 1;
    int64    ring_index        = 2;
    int32    fills_amount      = 3;
    string   miner             = 4;
    string   tx_hash           = 5;
    repeated Trade.Fee fees    = 6;
    int64    block_height      = 7;
    int64    block_timestamp   = 8;
    OrderSnippet  taker        = 9;
    OrderSnippet  maker        = 10;
}

// Usef for JSON RPC
message Account {
    message BalanceAndAllowance{
        string token                = 1;
        string balance              = 2;
        string allowance            = 3;
        string available_balance    = 4;
        string available_allowance  = 5;
    }

    string address  = 1;
    int32  nonce    = 2;
    map<string, BalanceAndAllowance> token_balance_and_allowances_map = 3;
}

message GetAccounts{
    message Params {
        repeated string addresses  = 1;
        repeated string tokens = 2;
    }
    message Result {
       repeated Account accounts = 1;
    }
}

message SubmitOrder{
    message Params {
        RawOrder order = 1;
    }
    message Result {
        string order_hash = 1;
    }
}

message GetOrders{
    message Params {
        string owner = 1;
        io.lightcone.core.MarketPair market = 2;
        repeated string statuses = 3;
        string sort = 4;
        int32 page_num = 5;
        int32 page_size = 6;
    }

    message Result{
        string owner = 1;
        int32 page_num = 2;
        int32 page_size = 3;
        int32 total = 4;
        // Do not return the full order, only return a small pice of information.
        repeated OrderSnippet orders = 5;
    }

}

message GetTrades{
    message Params {
        string owner = 1;
        io.lightcone.core.MarketPair market = 2;
        string sort = 3;
        int32 page_num = 4;
        int32 page_size = 5;
    }
    message Result {
        string owner = 1;
        int32 page_num = 2;
        int32 page_size = 3;
        int32 total = 4;
        repeated io.lightcone.persistence.Activity trades = 5;
    }
}

message GetRings {
    message Params {
        string ringHash = 1;
        string ringIndex = 2;
        string sort = 3;
        int32 page_num = 4;
        int32 page_size = 5;
    }

    message Result {
        int32 page_num = 1;
        int32 page_size = 2;
        int32 total  = 3;
        repeated RingSnippet rings = 4;
    }
}

message GetActivities {
    message Params {
        string owner = 1;
        string type = 2;  // TODO(yadong): I think we can use Enum type here.
        string sort = 3;  // TODO(yadong): I think we can use Enum type here.
        int32 page_num = 4;
        int32 page_size = 5;
    }

    //TODO定义Transaction的前端结构
    message Result {
        string owner = 1;
        int32 page_num = 2;
        int32 page_size = 3;
        int32 total = 4;
        repeated io.lightcone.persistence.Activity activities = 5;
    }
}

message GetTokens {
    message Params {
    }

    message  Result {
        repeated io.lightcone.core.TokenMetadata tokens  =1;
    }
}

message GetMarkets {
    message Params {
    }

    message Result {
        repeated io.lightcone.core.MarketMetadata markets  =1;
    }
}

//order book 可以使用 relayer_rpc_internal_core 中的GetOrderbook
