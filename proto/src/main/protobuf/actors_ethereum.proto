/*
 * Copyright 2018 Loopring Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
package org.loopring.lightcone.proto.actors;

import "ethereum.proto";
import "persistence.proto";

message XEthereumProxySettings {
    message XNode {
        string host = 1;
        int32 port = 2;
        string ipcPath = 3;
    }
    int32 pool_size = 1;
    int32 check_interval_seconds = 2;
    float healthy_threshold = 3;
    repeated XNode nodes = 4;
}

message XCheckBlockHeight {
}

message XCheckBlockHeightResp {
    int32 current_block = 1;
    int32 height_block = 2;
}

message XNodeBlockHeight{
    string path = 1;
    int32 height = 2;
}

message XBlockJob{
    int32 height = 1;
    repeated string txhashes = 2;
}


message XJsonRpcReq {
    string json = 1;
}

message XRpcReqWithHeight{
    XJsonRpcReq req = 1;
    uint32 height = 2;
}

message XJsonRpcErr {
    int32 code = 1;
    string message = 2;
}

message XJsonRpcRes {
    string json = 1;
}

///////////////////////////////////////////
//
// ethereum original type
//
///////////////////////////////////////////

message XTransaction {
    string hash = 1;
    string nonce = 2;
    string blockHash = 3;
    string blockNumber = 4;
    string transactionIndex = 5;
    string from = 6;
    string to = 7;
    string value = 8;
    string gasPrice = 9;
    string gas = 10;
    string input = 11;
    string r = 12;
    string s = 13;
    string v = 14;
}

message XLog {
    string logIndex = 1;
    string blockNumber = 2;
    string blockHash = 3;
    string transactionHash = 4;
    string transactionIndex = 5;
    string address = 6;
    string data = 7;
    repeated string topics = 8;
    bool removed = 9;
}

message XTransactionReceipt {
    string blockHash = 1;
    string blockNumber = 2;
    string transactionHash = 3;
    string transactionIndex = 4;
    string from = 5;
    string to = 6;
    string contractAddress = 7;
    string cumulativeGasUsed = 8;
    string gasUsed = 9;
    repeated XLog logs = 10;
    string logsBloom = 11;
    string root = 12;
    string status = 13;
}

message XBlockWithTxHash {
    string number = 1;
    string hash = 2;
    string parentHash = 3;
    string nonce = 4;
    string sha3Uncles = 5;
    string logsBloom = 6;
    string transactionsRoot = 7;
    string stateRoot = 8;
    string receiptRoot = 9;
    string miner = 10;
    string difficulty = 11;
    string totalDifficulty = 12;
    string extraData = 13;
    string size = 14;
    string gasLimit = 15;
    string gasUsed = 16;
    string timestamp = 17;
    repeated string transactions = 18;
    repeated string uncles = 19;
}

message XBlockWithTxObject {
    string number = 1;
    string hash = 2;
    string parentHash = 3;
    string nonce = 4;
    string sha3Uncles = 5;
    string logsBloom = 6;
    string transactionsRoot = 7;
    string stateRoot = 8;
    string receiptRoot = 9;
    string miner = 10;
    string difficulty = 11;
    string totalDifficulty = 12;
    string extraData = 13;
    string size = 14;
    string gasLimit = 15;
    string gasUsed = 16;
    string timestamp = 17;
    repeated XTransaction transactions = 18;
    repeated string uncles = 19;
}

message XTraceCall {
    string from = 1;
    string to = 2;
    string input = 3;
    string output = 4;
    string gas = 5;
    string gasUsed = 6;
    string type = 7;
    string value = 8;
}

message XTraceTransaction {
    string from = 1;
    string to = 2;
    string input = 3;
    string output = 4;
    string gas = 5;
    string gasUsed = 6;
    string type = 7;
    string value = 8;
    repeated XTraceCall calls = 9;
}

message XTransactionParam {
    string from = 1;
    string to = 2;
    string gas = 3;
    string gasPrice = 4;
    string value = 5;
    string data = 6;
}

//message BlockWithTxAndReceipt {
//    Block block = 1;
//    repeated Transaction        transactions = 2;
//    repeated TransactionReceipt receipts = 3;
//}

///////////////////////////////////////////
//
// ethereum json rpc params
//
///////////////////////////////////////////

//eth_blockNumber
message XEthBlockNumberReq {
}

message XEthResError {
    int32 code = 1;
    string error = 2;
}

message XEthBlockNumberRes {
    int32 id = 1;
    string jsonrpc = 2;
    string result = 3;
    XEthResError error = 4;
}

message XEthCallReq {
    XTransactionParam param = 1;
    string tag = 2;
}

message XEthCallRes {
    int32 id = 1;
    string jsonrpc = 2;
    string result = 3;
    XEthResError error = 4;
}

// eth_getBalance
message XEthGetBalanceReq {
    string address = 1;
    string tag = 2;
}
message XEthGetBalanceRes {
    int32 id = 1;
    string jsonrpc = 2;
    string result = 3;
    XEthResError error = 4;
}

// eth_getTransactionByHash
message XGetTransactionByHashReq {
    string hash = 1;
}
message XGetTransactionByHashRes {
    int32 id = 1;
    string jsonrpc = 2;
    XTransaction result = 3;
    XEthResError error = 4;
}

// eth_getTransactionReceipt
message XGetTransactionReceiptReq {
    string hash = 1;
}
message XGetTransactionReceiptRes {
    int32 id = 1;
    string jsonrpc = 2;
    XTransactionReceipt result = 3;
    XEthResError error = 4;
}

// eth_getBlockByNumber
message XGetBlockWithTxHashByNumberReq {
    string blockNumber = 1;
}
message XGetBlockWithTxHashByNumberRes {
    int32 id = 1;
    string jsonrpc = 2;
    XBlockWithTxHash result = 3;
    XEthResError error = 4;
}

message XGetBlockWithTxObjectByNumberReq {
    string blockNumber = 1;
}
message XGetBlockWithTxObjectByNumberRes {
    int32 id = 1;
    string jsonrpc = 2;
    XBlockWithTxObject result = 3;
    XEthResError error = 4;
}

// eth_getBlockByHash
message XGetBlockWithTxHashByHashReq {
    string blockHash = 1;
}
message XGetBlockWithTxHashByHashRes {
    int32 id = 1;
    string jsonrpc = 2;
    XBlockWithTxHash result = 3;
    XEthResError error = 4;
}

message XGetBlockWithTxObjectByHashReq {
    string blockHash = 1;
}
message XGetBlockWithTxObjectByHashRes {
    int32 id = 1;
    string jsonrpc = 2;
    XBlockWithTxObject result = 3;
    XEthResError error = 4;
}

// debug_traceTransaction
message XTraceTransactionReq {
    string txhash = 1;
}
message XTraceTransactionRes {
    int32 id = 1;
    string jsonrpc = 2;
    XTraceTransaction result = 3;
    XEthResError error = 4;
}

// eth_estimateGas
message XGetEstimatedGasReq {
    string to = 1;
    string data = 2;
}
message XGetEstimatedGasRes {
    int32 id = 1;
    string jsonrpc = 2;
    string result = 3;
    XEthResError error = 4;
}

message XGetNonceReq {
    string owner = 1;
    string tag = 2;
}
message XGetNonceRes {
    int32 id = 1;
    string jsonrpc = 2;
    string result = 3;
    XEthResError error = 4;
}

message XGetBlockTransactionCountReq {
    string block_hash = 1;
}
message XGetBlockTransactionCountRes {
    int32 id = 1;
    string jsonrpc = 2;
    string result = 3;
    XEthResError error = 4;
}

message XSendRawTransactionReq {
    string data = 1;
}

message XBatchContractCallReq {
    repeated XEthCallReq reqs = 1;
}

message XBatchContractCallRes {
    repeated XEthCallRes resps = 1;
}

message XBatchGetTransactionsReq {
    repeated XGetTransactionByHashReq reqs = 1;
}

message XBatchGetTransactionsRes {
    repeated XGetTransactionByHashRes resps = 1;
}

message XBatchGetTransactionReceiptsReq {
    repeated XGetTransactionReceiptReq reqs = 1;
}

message XBatchGetTransactionReceiptsRes {
    repeated XGetTransactionReceiptRes resps = 1;
}

message XSaveBlockReq {
    ethereum.XBlockData block_data = 1;
}

message XSaveBlockRes {
    persistence.XPersistenceError error = 1;
}
