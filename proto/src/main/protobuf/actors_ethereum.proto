/*
 * Copyright 2018 Loopring Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
package org.loopring.lightcone.proto;

import "ethereum.proto";
import "core_data.proto";

message EthereumProxySettings {
    message Node {
        string host = 1;
        int32 port = 2;
        string ipcPath = 3;
    }
    int32 pool_size = 1;
    int32 check_interval_seconds = 2;
    float healthy_threshold = 3;
    repeated Node nodes = 4;
}

//message CheckBlockHeightResp {
//    int32 current_block = 1;
//    int32 height_block = 2;
//}

message NodeBlockHeight{
    string path = 1;
    int32 height = 2;
}

message NodeHeightReq{}

message NodeHeightRes{
    repeated NodeBlockHeight nodes = 1;
}

message XJsonRpcReq {
    string json = 1;
}

message XRpcReqWithHeight{
    XJsonRpcReq req = 1;
    uint32 height = 2;
}

message XJsonRpcErr {
    int32 code = 1;
    string message = 2;
}

message XJsonRpcRes {
    string json = 1;
}

///////////////////////////////////////////
//
// ethereum original type
//
///////////////////////////////////////////

message Transaction {
    string hash = 1;
    string nonce = 2;
    string blockHash = 3;
    string blockNumber = 4;
    string transactionIndex = 5;
    string from = 6;
    string to = 7;
    string value = 8;
    string gasPrice = 9;
    string gas = 10;
    string input = 11;
    string r = 12;
    string s = 13;
    string v = 14;
}

message TransactionLog {
    string logIndex = 1;
    string blockNumber = 2;
    string blockHash = 3;
    string transactionHash = 4;
    string transactionIndex = 5;
    string address = 6;
    string data = 7;
    repeated string topics = 8;
    bool removed = 9;
}

message TransactionReceipt {
    string blockHash = 1;
    string blockNumber = 2;
    string transactionHash = 3;
    string transactionIndex = 4;
    string from = 5;
    string to = 6;
    string contractAddress = 7;
    string cumulativeGasUsed = 8;
    string gasUsed = 9;
    repeated TransactionLog logs = 10;
    string logsBloom = 11;
    string root = 12;
    string status = 13;
}

message BlockWithTxHash {
    string number = 1;
    string hash = 2;
    string parentHash = 3;
    string nonce = 4;
    string sha3Uncles = 5;
    string logsBloom = 6;
    string transactionsRoot = 7;
    string stateRoot = 8;
    string receiptRoot = 9;
    string miner = 10;
    string difficulty = 11;
    string totalDifficulty = 12;
    string extraData = 13;
    string size = 14;
    string gasLimit = 15;
    string gasUsed = 16;
    string timestamp = 17;
    repeated string transactions = 18;
    repeated string uncles = 19;
}

message BlockWithTxObject {
    string number = 1;
    string hash = 2;
    string parentHash = 3;
    string nonce = 4;
    string sha3Uncles = 5;
    string logsBloom = 6;
    string transactionsRoot = 7;
    string stateRoot = 8;
    string receiptRoot = 9;
    string miner = 10;
    string difficulty = 11;
    string totalDifficulty = 12;
    string extraData = 13;
    string size = 14;
    string gasLimit = 15;
    string gasUsed = 16;
    string timestamp = 17;
    repeated Transaction transactions = 18;
    repeated string uncles = 19;
}

message TraceCall {
    string from = 1;
    string to = 2;
    string input = 3;
    string output = 4;
    string gas = 5;
    string gasUsed = 6;
    string type = 7;
    string value = 8;
}

message TraceTransaction {
    string from = 1;
    string to = 2;
    string input = 3;
    string output = 4;
    string gas = 5;
    string gasUsed = 6;
    string type = 7;
    string value = 8;
    repeated TraceCall calls = 9;
}

message TransactionParams {
    string from = 1;
    string to = 2;
    string gas = 3;
    string gasPrice = 4;
    string value = 5;
    string data = 6;
}

//message BlockWithTxAndReceipt {
//    Block block = 1;
//    repeated Transaction        transactions = 2;
//    repeated TransactionReceipt receipts = 3;
//}

///////////////////////////////////////////
//
// ethereum json rpc params
//
///////////////////////////////////////////

//eth_blockNumber
message EthBlockNumberReq {
}

message EthResError {
    int32 code = 1;
    string error = 2;
}

message EthBlockNumberRes {
    int32 id = 1;
    string jsonrpc = 2;
    string result = 3;
    EthResError error = 4;
}

message EthCallReq {
    int32 id = 1;
    TransactionParams param = 2;
    string tag = 3;
}

message EthCallRes {
    int32 id = 1;
    string jsonrpc = 2;
    string result = 3;
    EthResError error = 4;
}

// eth_getBalance
message EthGetBalance {
    message Req {
        string address = 1;
        string tag = 2;
    }
    message Res {
        int32 id = 1;
        string jsonrpc = 2;
        string result = 3;
        EthResError error = 4;
    }
}

// eth_getTransactionByHash
message GetTransactionByHashReq {
    string hash = 1;
}
message GetTransactionByHashRes {
    int32 id = 1;
    string jsonrpc = 2;
    Transaction result = 3;
    EthResError error = 4;
}

// eth_getTransactionReceipt
message GetTransactionReceiptReq {
    string hash = 1;
}
message GetTransactionReceiptRes {
    int32 id = 1;
    string jsonrpc = 2;
    TransactionReceipt result = 3;
    EthResError error = 4;
}

// eth_getBlockByNumber
message GetBlockWithTxHashByNumberReq {
    string blockNumber = 1;
}
message GetBlockWithTxHashByNumberRes {
    int32 id = 1;
    string jsonrpc = 2;
    BlockWithTxHash result = 3;
    EthResError error = 4;
}

message GetBlockWithTxObjectByNumberReq {
    string blockNumber = 1;
}
message GetBlockWithTxObjectByNumberRes {
    int32 id = 1;
    string jsonrpc = 2;
    BlockWithTxObject result = 3;
    EthResError error = 4;
}

// eth_getBlockByHash
message GetBlockWithTxHashByHashReq {
    string blockHash = 1;
}
message GetBlockWithTxHashByHashRes {
    int32 id = 1;
    string jsonrpc = 2;
    BlockWithTxHash result = 3;
    EthResError error = 4;
}

message GetBlockWithTxObjectByHashReq {
    string blockHash = 1;
}
message GetBlockWithTxObjectByHashRes {
    int32 id = 1;
    string jsonrpc = 2;
    BlockWithTxObject result = 3;
    EthResError error = 4;
}

// debug_traceTransaction
message TraceTransactionReq {
    string txhash = 1;
}
message TraceTransactionRes {
    int32 id = 1;
    string jsonrpc = 2;
    TraceTransaction result = 3;
    EthResError error = 4;
}

// eth_estimateGas
message GetEstimatedGasReq {
    string to = 1;
    string data = 2;
}
message GetEstimatedGasRes {
    int32 id = 1;
    string jsonrpc = 2;
    string result = 3;
    EthResError error = 4;
}

message GetNonceReq {
    string owner = 1;
    string tag = 2;
}
message GetNonceRes {
    int32 id = 1;
    string jsonrpc = 2;
    string result = 3;
    EthResError error = 4;
}

message GetBlockTransactionCountReq {
    string block_hash = 1;
}
message GetBlockTransactionCountRes {
    int32 id = 1;
    string jsonrpc = 2;
    string result = 3;
    EthResError error = 4;
}

message SendRawTransactionReq {
    string data = 1;
}

message GetUncleByBlockNumAndIndexReq{
    string blockNum = 1;
    string index = 2;
}

message BatchGetUncleByBlockNumAndIndexReq{
   repeated GetUncleByBlockNumAndIndexReq reqs = 1;
}

message BatchGetUncleByBlockNumAndIndexRes{
   repeated GetBlockWithTxHashByHashRes resps = 1;
}

message BatchContractCallReq {
    repeated EthCallReq reqs = 1;
}

message BatchContractCallRes {
    repeated EthCallRes resps = 1;
}

message BatchGetTransactionsReq {
    repeated GetTransactionByHashReq reqs = 1;
}

message BatchGetTransactionsRes {
    repeated GetTransactionByHashRes resps = 1;
}

message BatchGetTransactionReceiptsReq {
    repeated GetTransactionReceiptReq reqs = 1;
}

message BatchGetTransactionReceiptsRes {
    repeated GetTransactionReceiptRes resps = 1;
}

message SaveBlockReq {
    BlockData block_data = 1;
}

message SaveBlockRes {
    Error error = 1;
}
