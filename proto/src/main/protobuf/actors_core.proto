/*
 * Copyright 2018 Loopring Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
package org.loopring.lightcone.proto;

import "core_data.proto";
import "core_messages.proto";

message OrderState {
    bytes amount_s = 1;
    bytes amount_b = 2;
    bytes amount_fee = 3;
}

message XOrder {
    string id = 1;
    string token_s = 2;
    string token_b = 3;
    string token_fee = 4;
    bytes amount_s = 5;
    bytes amount_b = 6;
    bytes amount_fee = 7;
    int64 created_at = 8;
    int64 updated_at = 9;
    XOrderStatus status = 10;
    double wallet_split_percentage = 11;
    OrderState outstanding = 12;
    OrderState reserved = 13;
    OrderState actual = 14;
    OrderState matchable = 15;
}

message XExpectedFill {
    XOrder order = 1;
    OrderState pending = 2;
    bytes amount_margin = 3;
}

message XOrderRing {
    XExpectedFill maker = 1;
    XExpectedFill taker = 2;
}

message XGetOrderFilledAmountReq {
    string order_id = 1;
}

message XGetOrderFilledAmountRes {
    string order_id = 1;
    bytes filled_amount_s = 2;
}

message XBalanceAndAllowance {
    bytes balance = 1;
    bytes allowance = 2;
    bytes availableBalance = 3;
    bytes availableAllowance = 4;
}

message XGetBalanceAndAllowancesReq {
    string address = 1;
    repeated string tokens = 2;
}

message XGetBalanceAndAllowancesRes {
    string address = 1;
    map<string, XBalanceAndAllowance> balance_and_allowance_map = 2;
    XError error = 3;
}

message XGetBalanceReq{
    string address = 1;
    repeated string tokens = 2;
}
message XGetBalanceRes {
    string address = 1;
    map<string, bytes> balance_map = 2;
    XError error = 3;
}

message XGetAllowanceReq{
    string address = 1;
    repeated string tokens = 2;
}
message XGetAllowanceRes {
    string address = 1;
    map<string, bytes> allowance_map = 2;
    XError error = 3;
}

message XSubmitSimpleOrderReq {
    string owner = 1;
    XOrder order = 2;
}

message XSubmitOrderRes {
    XOrder order = 1;
}

message XAddressBalanceUpdated {
    string address = 1;
    string token = 2;
    bytes balance = 3;
}

message XAddressAllowanceUpdated {
    string address = 1;
    string token = 2;
    bytes balance = 3;
}

// message XOrderRecoverySettings {
//     bool skip_recovery = 1;
//     int32 batch_size = 2;
//     string order_owner = 3;
//     XMarketId market_id = 4;
// }



message UpdateFilledAmountReq {
    string id = 1;
    bytes order_filled_amount_s = 2;
}

message UpdateFilledAmountRes {
    XErrorCode error = 1;
}

message XGetFilledAmountReq {
    repeated string order_ids = 1;
}

message XGetFilledAmountRes {
    map<string, bytes> filled_amount_s_map = 1;
}

message XUpdateBalanceAndAllowanceReq {
    string address = 1;
    string token = 2;
    XBalanceAndAllowance balance_and_allowance = 3;
}

message XUpdateBalanceAndAllowanceRes {
    XErrorCode error = 1;
    XBalanceAndAllowance balance_and_allowance = 2;
}

message XGasPriceUpdated {
    int64 gas_price = 1;
}

message XTriggerRematchReq {
    bool sell_order_as_taker = 1;
    int32 offset = 2;
}

message XSendRawTxReq {
    bytes data = 1;
}

message XSendRawTxRes {
    SendStatus status = 1;
    enum SendStatus {
        SEND_STATUS_UNKNOW = 0;
        SEND_STATUS_SUCCESS = 1;
    }
}


enum XExecutedStatus {
    EXECUTED_STATUS_UNKNOW = 0;
    EXECUTED_STATUS_FAILED = 1;
    EXECUTED_STATUS_SUCCESS = 2;
}

message XRingExecutedRes {
    XOrderRing ring = 1;
    string tx_hash = 2;
    XExecutedStatus status = 3;
    bytes used_gas = 4;
    int64 block_number = 5;
}

message XSendRawTransaction {
    bytes data = 1;
}

message XSendRawTransactionRes {
    int32 id = 1;
    string jsonrpc = 2;
    string result = 3;
}

message XSettleRingsReq {
    repeated XOrderRing rings = 1;
    bytes gas_limit = 2;
    bytes gas_price = 3;
}

message XGetGasPriceReq {}

message XGetGasPriceRes {
    bytes gas_price = 1;
}

message XSetGasPriceReq {
    bytes gas_price = 1;
}

message XSetGasPriceRes {
    bytes gas_price = 1;
}


message XUpdatedTokenBurnRate {
    string token = 1;
    double burnRate = 2;
}

/// 合约ITradeHistory中的数据结构，可以通过查询合约，或者
/// 解析合约事件得到下面的数据：
message XOrderFilled {
    string order_hash = 1;
    bytes  filled     = 2;
}

message XOrderCancelled {
    string order_owner = 1;
    string order_hash  = 2;
    bool   cancelled   = 3;
}

message XCutoffs {
    string broker = 1;
    int32  cutoff = 2; // in seconds.
}

message XOwnerCutoffs {
    string broker = 1;
    string owner  = 2;
    int32  cutoff = 3; // in seconds.
}

message XTradingPairCutoffs {
    string broker       = 1;
    string trading_pair = 2;
    int32  cutoff       = 3; // in seconds.
}

message XOwnerTradingPairCutoffs {
    string broker       = 1;
    string owner        = 2;
    string trading_pair = 3;
    int32  cutoff       = 4; // in seconds.
}
