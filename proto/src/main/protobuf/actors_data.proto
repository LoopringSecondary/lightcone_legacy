/*
 * Copyright 2018 Loopring Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
package org.loopring.lightcone.proto;

import "core.proto";

enum TokenStandard {
    ERC20           = 0;
    ERC1400         = 1;
}

enum SigningAlgorithm {
    ALGO_ETHEREUM   = 0;
    ALGO_EIP712     = 1;
    ALGO_NONE       = 255;
}

message MarketPair {
    string token_s  = 1;
    string token_b  = 2;
}

// use bytes to represent big-numbers and string for addresses
message RawOrder {
    message Params {
        string dual_auth_addr                      = 1;
        string broker                              = 2;
        string order_interceptor                   = 3;
        string wallet                              = 4;
        int32  valid_until                         = 5; // in seconds
        string sig                                 = 6;
        string dual_auth_sig                       = 7;
        bool   all_or_none                         = 8;
        string dual_auth_private_key               = 12;
    }

    message FeeParams {
        string token_fee               = 1;
        bytes  amount_fee              = 2;
        int32  waive_fee_percentage    = 3;
        int32  token_s_fee_percentage  = 4;
        int32  token_b_fee_percentage  = 5;
        string token_recipient         = 6;
        int32  wallet_split_percentage = 7;
    }

    message ERC1400Params {
        TokenStandard token_standard_s    = 1;
        TokenStandard token_standard_b    = 2;
        TokenStandard token_standard_fee  = 3;

        string    tranche_s            = 4;
        string    tranche_b            = 5;
        string    transfer_data_s      = 6;
    }

    // // The following fieds are not part of Loopring's order definition but
    // // will be provided as metadata
    message State {
        int64 created_at              = 101;
        int64 updated_at              = 102;
        int64 matched_at              = 103;
        int64 updated_at_block        = 104;
        OrderStatus status            = 105;

        bytes actual_amount_s         = 200;
        bytes actual_amount_b         = 201;
        bytes actual_amount_fee       = 202;
        bytes outstanding_amount_s    = 203;
        bytes outstanding_amount_b    = 204;
        bytes outstanding_amount_fee  = 205;
    }

    // string  id          = 1; // order hash
    string hash                       = 2;
    int32  version                    = 3;
    string owner                      = 4;
    string token_s                    = 5;
    string token_b                    = 6;
    bytes  amount_s                   = 7;
    bytes  amount_b                   = 8;
    int32  valid_since                = 9; // in seconds
    Params params                     = 10;
    FeeParams fee_params              = 11;
    ERC1400Params erc1400_params      = 12;
    State state                       = 13;
    int64  sequence_id                = 14;
    string market_key                 = 15;
    int32  account_shard              = 16;
    int32  market_shard               = 17;
}


message OrderState {
    bytes amount_s          = 1;
    bytes amount_b          = 2;
    bytes amount_fee        = 3;
}

message Order {
    string id                       = 1;
    string token_s                  = 2;
    string token_b                  = 3;
    string token_fee                = 4;
    bytes amount_s                  = 5;
    bytes amount_b                  = 6;
    bytes amount_fee                = 7;
    int64 valid_since               = 8;
    int64 submitted_at              = 9;
    int32 num_attempts              = 10;
    OrderStatus status              = 11;
    double wallet_split_percentage  = 12;
    OrderState outstanding          = 13;
    OrderState reserved             = 14;
    OrderState actual               = 15;
    OrderState matchable            = 16;
}

message ExpectedOrderFill {
    Order order                     = 1;
    OrderState pending              = 2;
    bytes amount_margin             = 3;
}

message OrderRing {
    ExpectedOrderFill maker         = 1;
    ExpectedOrderFill taker         = 2;
}


message BalanceAndAllowance {
    bytes balance                   = 1;
    bytes allowance                 = 2;
    bytes available_balance         = 3;
    bytes available_allowance       = 4;
}

message EthereumProxySettings {
    message Node {
        string host                 = 1;
        int32  port                 = 2;
        string ipcPath              = 3;
    }
    int32 pool_size                 = 1;
    int32 check_interval_seconds    = 2;
    float healthy_threshold         = 3;
    repeated Node nodes             = 4;
}

message TokenMetadata {
    enum Type {
        TOKEN_TYPE_ERC20       = 0;
        TOKEN_TYPE_ERC1400     = 1;
    }

    enum Status {
        VALID    = 0; // This token is NOT displyed in walelt
        INVALID     = 1;  // This token is displayed in wallet.
    }

    Type     type                   = 1;
    Status   status                 = 2;
    string   symbol                 = 3;
    string   name                   = 4;
    string   address                = 5;
    string   unit                   = 6;
    int32    decimals               = 7;
    string   website_url            = 8;
    int32    precision              = 9;
    double   burn_rate_for_market   = 10;
    double   burn_rate_for_p2p      = 11;
    double   usd_price              = 12;
    int64    updated_at             = 13;
}

message MarketMetadata {
    enum Status {
        TERMINATED  = 0;
        ACTIVE   = 1;
        READONLY  = 2;
    }

    Status          status                  = 1;
    string          quote_token_symbol      = 2;
    string          base_token_symbol       = 3;
    int32           max_numbers_of_orders   = 4;
    int32           price_decimals          = 5;
    int32           orderbook_agg_levels    = 6;
    int32           precision_for_amount    = 7;
    int32           precision_for_total     = 8;
    bool            browsable_in_wallet     = 9;
    int64           updated_at              = 10;

    MarketId        market_id               = 20; // computed
    string          market_key              = 21; // computed
}

message MarketStats {
    int32  num_buys             = 1;
    int32  num_sells            = 2;
    int32  num_orders           = 3;
    double best_buy_price       = 5;
    double best_sell_price      = 6;
    double latest_price         = 7;
    bool   is_last_taker_sell   = 8;
}

message RingBatch {
    message Ring {
        repeated int32 order_indexes = 1;
    }

    string fee_recipient            = 1;
    string miner                    = 2;
    string sig                      = 3;
    repeated Ring rings             = 4;
    repeated RawOrder orders        = 5;
    SigningAlgorithm sign_algorithm = 6;
    string hash                     = 7;
    string transaction_origin       = 8;
}

message RingBatchContext {
    string fee_recipient            = 1;
    string miner                    = 2;
    string transaction_origin       = 3;
    string miner_private_key        = 4;
    string lrc_address              = 5;
}

message Trade {
    message Fees {
        string token_fee               = 1;
        bytes  amount_fee              = 2;
        string token_amount_s          = 3;
        bytes  fee_amount_s            = 4;
        string token_amount_b          = 5;
        bytes  fee_amount_b            = 6;
        string fee_recipient           = 7;
    }

    string owner             = 1;
    string delegate_address  = 2;
    string order_hash        = 3;
    string ring_hash         = 4;
    int64  ring_index        = 5;
    string tx_hash           = 6;
    bytes  amount_s          = 7;
    bytes  amount_b          = 8;
    string token_s           = 9;
    string token_b           = 10;
    string market_key        = 11;
    bytes  split             = 12; //tokenS
    Fees   fees              = 13;
    int64  created_at        = 14;
    int64  updated_at        = 15;
    int64  block_height      = 16;
    int64  block_timestamp   = 17;
    int64  sequence_id       = 18;
}

message SettlementTx {
    enum Status {
        PENDING  = 0;
        BLOCK    = 1;
        FAILED   = 2;
    }
    string  tx_hash    = 1;
    string  from       = 2;
    string  to         = 3;
    string  gas        = 4;
    string  gasPrice   = 5;
    string  value      = 6;
    string  data       = 7;
    int64   nonce      = 8;
    Status  status     = 9;
    int64   create_at  = 10;
    int64   updated_at = 11;
}

message NodeBlockHeight{
    string node_name = 1;
    int64  height    = 2;
}

message MissingBlocksRecord {
    int64 block_start = 1;
    int64 block_end = 2;
    int64 last_handled_block = 3;
    int64 sequence_id = 4;
}

// Used as statistical data, such as a histogram
message OHLCRawData {
    int64      ring_index     = 1;
    string     tx_hash        = 2;
    string     market_key     = 3;
    int64      time           = 4;
    double     base_amount    = 6;
    double     quote_amount   = 7;
    double     price          = 8;
}

message OHLCData {
    repeated  double  data      = 1;
    /*int64    starting_point   = 2;
    double     quality          = 3;
    double     amount           = 4;
    double     opening_price    = 5;
    double     closing_price    = 6;
    double     highest_price    = 7;
    double     lowest_price     = 8;*/
}
